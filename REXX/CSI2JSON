/******************************* REXX *********************************/        
/* Copyright 2022 IBM Corp.                                           */        
/*                                                                    */        
/* Licensed under the Apache License, Version 2.0 (the "License");    */        
/* you may not use this file except in compliance with the License.   */        
/* You may obtain a copy of the License at                            */        
/*                                                                    */        
/* http://www.apache.org/licenses/LICENSE-2.0                         */        
/*                                                                    */        
/* Unless required by applicable law or agreed to in writing,         */        
/* software distributed under the License is distributed on an "AS    */        
/* IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either    */        
/* express or implied.  See the License for the specific language     */        
/* governing permissions and limitations under the License.           */        
/*                                                                    */        
/**********************************************************************/        
/* Name       : CSI2JSON                                              */        
/*                                                                    */        
/* Description: Exports CSI into the JSON file which can be impoted   */        
/*              IBM Proactive Maintenance Service Portal.             */        
/*                                                                    */        
/* Function   : Reads the content of supplied CSI VSAM dataset and    */        
/*              exports SMP/E entries into the JSON file which        */        
/*              IBM Proactive Maintenance Service Portal imports.     */        
/*                                                                    */        
/*              Script allocates tempopary working datasets under the */        
/*              %USERID%.CSI2JSON HLQ and scratches them after the    */        
/*              processing.                                           */        
/*                                                                    */        
/*              JSON dataset is allocated under the following HLQ:    */        
/*                                                                    */        
/*                %USERID%.CSI2JSON.JSON                              */        
/*                                                                    */        
/*              It is possible to change the JSON dataset name by     */        
/*              specifying the following script argument:             */        
/*                                                                    */        
/*                JSON_DSN=dataset_name                               */        
/*                                                                    */        
/*              CSI2JSON does not scratches any existed JSON or       */        
/*              temporary working datasets. It might happen that user */        
/*              had already run the script against the same CSI VSAM  */        
/*              where the JSON/working datasets is already existed on */        
/*              the DASD. The script will stop in this case with      */        
/*              return code > 0. The situation can be easily          */        
/*              eliminated by specifuing                              */        
/*                                                                    */        
/*                DELETE_EXISTING_DSN=[YES | NO]                      */        
/*                                                                    */        
/*              which force CSI2JSON to delete existing JSON/working  */        
/*              before processing.                                    */        
/*                                                                    */        
/*              It might be useful to keep temporal working datasets  */        
/*              on DASD which can be done by the following argument:  */        
/*                                                                    */        
/*                KEEP_TEMPORARY_DSN=[YES | NO]                       */        
/*                                                                    */        
/*              User can always request the script tracing by setting */        
/*                                                                    */        
/*                TRACE=[ON | OFF]                                    */        
/*                                                                    */        
/*              argument. Please take into your attention that        */        
/*              enabling trace generates a lot of output and requires */        
/*              huge amount of DASD space of SYSTSPRT dataset if the  */        
/*              script is run in batch mode.                          */        
/*                                                                    */        
/* Know issues:                                                       */        
/*                                                                    */        
/*   Issue    : The following error message appears in the script     */        
/*              output:                                               */        
/*                                                                    */        
/*                                                                    */        
/*   ERROR: RETURN CODE 16 WHILE RUNNING GIMSMP APPLICATION.          */        
/*          PROCESSING TERMINATED.                                    */        
/*                                                                    */        
/*          REVIEW SMP/E LOG DATASET FOR MORE INFORMATION.            */        
/*                                                                    */        
/*          CSI2JSON IS EXITING DUE TO ERROR.                         */        
/*                                                                    */        
/*                                                                    */        
/*   Cause    : SMP/E GIMSMP application failed with specified return */        
/*              code.                                                 */        
/*                                                                    */        
/*   Solution : Check %USERID%.CSI2JSON.SMP* datasets for the error   */        
/*              message description.                                  */        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/* Input parameters:                                                  */        
/*                                                                    */        
/*   None.                                                            */        
/*                                                                    */        
/* Output     :                                                       */        
/*                                                                    */        
/*   Return Code       Message                                        */        
/*   -----------       ---------------------------------------------- */        
/*             0       Complete successful                            */        
/*           > 0       Failure, see TSO CONSOLE or SYSTSPRT dataset   */        
/*                     for more info.                                 */        
/*                                                                    */        
/* Change Activity :                                                  */        
/*   $D1=XXXXXXXX,CSI2JSON,01/18/22,VON: Initial version              */        
/**********************************************************************/        
parse upper arg args                                                            
/**********************************************************************/        
/* Initialize set of variables which will be used further in the      */        
/* script.                                                            */        
/**********************************************************************/        
c2j.script.version = "1.0.0"           /* Script version              */        
c2j.script.trace   = "OFF"             /* Trace flag                  */        
/**********************************************************************/        
/* Specify HEGH-LEVEL and MID-LEVEL qualifiers.                       */        
/**********************************************************************/        
c2j.hlq = SYSVAR(SYSUID) || ".CSI2JSON"  /* %HLQ% qualifier           */        
/**********************************************************************/        
/* Log() routine fills c2j.log.line. stem variable.                   */        
/* Use FlushLog() routine to write c2j.log.line. stem data into       */        
/* into %HLQ%.LOG data set.                                           */        
/*                                                                    */        
/* c2j.log. stem variable declares LOG dataset properties.            */        
/**********************************************************************/        
c2j.log.exist             = 'NO'                                                
c2j.log.primary           = 10                                                  
c2j.log.secondary         = 10                                                  
c2j.log.lrecl             = 125                                                 
c2j.log.blksize           = 12500                                               
c2j.log.space_units       = 'CYLINDERS'                                         
c2j.log.recfm             = 'V,B'                                               
c2j.log.line.0            = 0                                                   
c2j.log.dsname            = c2j.hlq || '.LOG'                                   
/**********************************************************************/        
/* Json() routine fills c2j.json.line. stem variable.                 */        
/* Issue FlushJson() routine to write c2j.json.line. stem data        */        
/* into %HLQ%.JSON data set.                                          */        
/*                                                                    */        
/* c2j.json. stem variable declares JSON dataset properties.          */        
/**********************************************************************/        
c2j.json.exist            = 'NO'                                                
c2j.json.primary          = 10                                                  
c2j.json.secondary        = 10                                                  
c2j.json.lrecl            = 32756                                               
c2j.json.blksize          = 32760                                               
c2j.json.space_units      = 'CYLINDERS'                                         
c2j.json.recfm            = 'V,B'                                               
c2j.json.line.0           = 0                                                   
c2j.json.dsname           = c2j.hlq || '.JSON'                                  
c2j.json.line.0           = 0                                                   
/**********************************************************************/        
/* SMP/E GIMSMP SMPCNTL dataset allocation parameters.                */        
/**********************************************************************/        
c2j.smpcnll.primary       = 1                                                   
c2j.smpcntl.secondary     = 1                                                   
c2j.smpcntl.lrecl         = 80                                                  
c2j.smpcntl.blksize       = 32760                                               
c2j.smpcntl.space_units   = 'TRACKS'                                            
c2j.smpcntl.recfm         = 'F,B'                                               
/**********************************************************************/        
/* SMP/E GIMSMP SMPLOG dataset allocation parameters.                 */        
/**********************************************************************/        
c2j.smplog.primary        = 10                                                  
c2j.smplog.secondary      = 10                                                  
c2j.smplog.lrecl          = 510                                                 
c2j.smplog.blksize        = 32000                                               
c2j.smplog.space_units    = 'CYLINDERS'                                         
c2j.smplog.recfm          = 'V,B'                                               
/**********************************************************************/        
/* SMP/E GIMSMP SMPLOGA dataset allocation parameters.                */        
/**********************************************************************/        
c2j.smploga.primary       = 10                                                  
c2j.smploga.secondary     = 10                                                  
c2j.smploga.lrecl         = 510                                                 
c2j.smploga.blksize       = 32000                                               
c2j.smploga.space_units   = 'CYLINDERS'                                         
c2j.smploga.recfm         = 'V,B'                                               
/**********************************************************************/        
/* SMP/E GIMSMP SMPOUT dataset allocation parameters.                 */        
/**********************************************************************/        
c2j.smpout.primary        = 10                                                  
c2j.smpout.secondary      = 10                                                  
c2j.smpout.lrecl          = 121                                                 
c2j.smpout.blksize        = 24200                                               
c2j.smpout.space_units    = 'CYLINDERS'                                         
c2j.smpout.recfm          = 'F,B,A'                                             
/**********************************************************************/        
/* SMP/E GIMSMP SMPRPT dataset allocation parameters.                 */        
/**********************************************************************/        
c2j.smprpt.primary        = 10                                                  
c2j.smprpt.secondary      = 10                                                  
c2j.smprpt.lrecl          = 121                                                 
c2j.smprpt.blksize        = 24200                                               
c2j.smprpt.space_units    = 'CYLINDERS'                                         
c2j.smprpt.recfm          = 'F,B,A'                                             
/**********************************************************************/        
/* SMP/E GIMSMP SMPLIST dataset allocation parameters.                */        
/**********************************************************************/        
c2j.smplist.keepdsn       = 'NO'                                                
c2j.smplist.delexisted    = 'NO'                                                
c2j.smplist.primary       = 10                                                  
c2j.smplist.secondary     = 10                                                  
c2j.smplist.lrecl         = 121                                                 
c2j.smplist.blksize       = 24200                                               
c2j.smplist.space_units   = 'CYLINDERS'                                         
c2j.smplist.recfm         = 'F,B,A'                                             
c2j.smplist.line.0        = 0                                                   
/**********************************************************************/        
/* SMP/E ZONE list.                                                   */        
/**********************************************************************/        
c2j.zone.target.0 = 0                /* c2j.zone.target.n = 'ARM#01T' */        
c2j.zone.dlib.0   = 0                /* c2j.zone.dlib.n   = 'ARM#01D' */        
/**********************************************************************/        
/* SMP/E PRODUCT list in GLOBAL zone.                                 */        
/* ----------------------------------                                 */        
/*                                                                    */        
/* c2j.GLOBAL.product.1.prodid  = '5635-ISP'                          */        
/* c2j.GLOBAL.product.1.vrm     = '08.01.00'                          */        
/* c2j.GLOBAL.product.1.description =                                 */        
/*                              'IBM Data Set Commander for z/OS V8.1 */        
/* c2j.GLOBAL.product.1.rework  = '2013337'                           */        
/* c2j.GLOBAL.product.1.recdate = '20034'                             */        
/* c2j.GLOBAL.product.1.rectime = '12:02:56'                          */        
/* c2j.GLOBAL.product.1.vendor  = 'IBM'                               */        
/* c2j.GLOBAL.product.1.prodsup.0 = 5                                 */        
/* c2j.GLOBAL.product.1.prodsup.1 = '5655-SPF,07.01.00'               */        
/* c2j.GLOBAL.product.1.prodsup.2 = '5698-R21,06.01.00'               */        
/* c2j.GLOBAL.product.1.prodsup.3 = '5698-A81,05.10.00'               */        
/* c2j.GLOBAL.product.1.prodsup.4 = '5698-A81,05.09.00'               */        
/* c2j.GLOBAL.product.1.prodsup.5 = '5698-A81,05.08.00'               */        
/* c2j.GLOBAL.product.1.srel    = 'Z038'                              */        
/*                                                                    */        
/**********************************************************************/        
c2j.GLOBAL.product.0 = 0                                                        
/**********************************************************************/        
/* SMP/E FEATURE list in GLOBAL zone.                                 */        
/**********************************************************************/        
c2j.GLOBAL.feature.0 = 0                                                        
/**********************************************************************/        
/* SMP/E SYSMODS list in GLOBAL zone.                                 */        
/**********************************************************************/        
c2j.GLOBAL.sysmods.0 = 0                                                        
                                                                                
ret = 0                                                                         
                                                                                
/**********************************************************************/        
/*                         MAIN ENTRY POINT                           */        
/**********************************************************************/        
Parse Upper Arg args                                                            
csi = GetArgs(args)                                                             
                                                                                
If c2j.script.trace = 'ON' Then                                                 
   Trace 'I'                                                                    
                                                                                
Call Initialize                                                                 
                                                                                
Call GetCSI(csi)                                                                
Call Export(csi)                                                                
                                                                                
Call Terminate ret                                                              
                                                                                
/**********************************************************************/        
/* GetArgs                                                            */        
/*                                                                    */        
/* Description : Gets user supplied application parameters.           */        
/*                                                                    */        
/* Function    : Breaks passed string into PARM=VALUE statements to   */        
/*               fill script stem variables. The following parameters */        
/*               are processed:                                       */        
/*                                                                    */        
/* TRACE=[ON | OFF] - Enable/disable script tracing.                  */        
/*                                                                    */        
/* KEEP_TEMPORARY_DSN=[YES | NO] - Keep working datasets on DASD.     */        
/*               These datasets are deleted by default.               */        
/*                                                                    */        
/* DELETE_EXISTING_DSN=[YES | NO] - Delete existing working / JSON    */        
/*               datasets during script run. Default is NO which      */        
/*               is safe to keep existing data and not scratch        */        
/*               something useful.                                    */        
/*                                                                    */        
/* JSON_DSN=dsn - Fully qualified dataset name to export JSON data.   */        
/*               If not set up the default %USERID%.CSI2JSON.JSON     */        
/*               is used.                                             */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  args              Application arguments                           */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetArgs: Procedure Expose c2j.                                                  
Parse Arg args                                                                  
                                                                                
Parse Var args csi rest                                                         
                                                                                
Do While rest \= ''                                                             
   Parse Var rest value# rest                                                   
                                                                                
   Parse Var value# lvalue '=' rvalue                                           
                                                                                
   If lvalue = 'KEEP_TEMPORARY_DSN' Then                                        
      If rvalue = 'YES' | rvalue = 'Y' Then                                     
         c2j.smplist.keepdsn = 'YES'                                            
                                                                                
   If lvalue = 'DELETE_EXISTING_DSN' Then                                       
      If rvalue = 'YES' | rvalue = 'Y' Then                                     
         c2j.smplist.delexisted = 'YES'                                         
                                                                                
   If lvalue = 'JSON_DSN' Then                                                  
      c2j.json.dsname = STRIP(rvalue)                                           
                                                                                
   If lvalue = 'TRACE' Then                                                     
      If rvalue = 'ON' Then                                                     
         c2j.script.trace = 'ON'                                                
End                                                                             
                                                                                
Say DATE('N') TIME('N') 'Processing args: KEEP_TEMPORARY_DSN=' ||,              
    c2j.smplist.keepdsn                                                         
Say DATE('N') TIME('N') 'Processing args: DELETE_EXISTING_DSN=' ||,             
    c2j.smplist.delexisted                                                      
Say DATE('N') TIME('N') 'Processing args: JSON_DSN='c2j.json.dsname             
Say DATE('N') TIME('N') 'Processing args: TRACE='c2j.script.trace               
                                                                                
Return csi                                                                      
                                                                                
/**********************************************************************/        
/* Export                                                             */        
/*                                                                    */        
/* Description : Export c2j. objects into JSON file.                  */        
/*                                                                    */        
/* Function    : Go thru all objects in c2j. stem and export data     */        
/*               into JSON file.                                      */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM to export                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
Export: Procedure Expose c2j.                                                   
Parse Arg csi                                                                   
                                                                                
Say DATE('N') TIME('N') 'Export' csi 'into' c2j.json.dsname 'dataset.'          
                                                                                
If c2j.smplist.delexisted = 'YES' Then Do                                       
   /* Delete existing JSON dataset */                                           
   If SYSDSN("'"c2j.json.dsname"'") = "OK" Then                                 
      Call DELETE "'"c2j.json.dsname"'"                                         
End                                                                             
                                                                                
Call ALLOCATE "JSON", ,                                                         
              "'"c2j.json.dsname"'", ,                                          
              'NEW',                                                            
              'SPACE('c2j.json.primary c2j.json.secondary')',                   
              c2j.json.space_units,                                             
              'RECFM('c2j.json.recfm')',                                        
              'LRECL('c2j.json.lrecl')',                                        
              'BLKSIZE('c2j.json.blksize') RELEASE'                             
                                                                                
Call ExportHead                                                                 
Call ExportInfo                                                                 
Call ExportCSIHead(csi)                                                         
Call ExportZones                                                                
Call ExportProducts                                                             
Call ExportFeatures                                                             
Call ExportSysmods                                                              
Call ExportCSITail                                                              
Call ExportTail                                                                 
                                                                                
Call DEALLOC 'JSON'                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportHead                                                         */        
/*                                                                    */        
/* Description : Export JSON head                                     */        
/*                                                                    */        
/* Function    : Simple function to store head of JSON file.          */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportHead: Procedure Expose c2j.                                               
                                                                                
c2j.json.line.0 = 1                                                             
c2j.json.line.1 = '{'                                                           
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportTail                                                         */        
/*                                                                    */        
/* Description : Export JSON tail                                     */        
/*                                                                    */        
/* Function    : Simple function to store tail of JSON file.          */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportTail: Procedure Expose c2j.                                               
                                                                                
c2j.json.line.0 = 1                                                             
c2j.json.line.1 = '}'                                                           
                                                                                
Call FlushJson 'FINIS'                                                          
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportInfo                                                         */        
/*                                                                    */        
/* Description : Export JSON info section                             */        
/*                                                                    */        
/* Function    : Simple function to store JSON info section. Info     */        
/*               describes basics of the JSON file.                   */        
/*                                                                    */        
/*               "_info": {                                           */        
/*                   "provider": "CSI2JSON",                          */        
/*                   "version": "1.0.0.0",                            */        
/*                   "export_date": "20220304",                       */        
/*                   "export_time": "04:32:12"                        */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportInfo: Procedure Expose c2j.                                               
                                                                                
c2j.json.line.0 = 6                                                             
c2j.json.line.1 = '    "_info": {'                                              
c2j.json.line.2 = '        "provider": "CSI2JSON",'                             
c2j.json.line.3 = '        "version": "'c2j.script.version'",'                  
c2j.json.line.4 = '        "export_date": "'DATE('Standard')'",'                
c2j.json.line.5 = '        "export_time": "'TIME('Normal')'"'                   
c2j.json.line.6 = '    },'                                                      
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportCSIHead                                                      */        
/*                                                                    */        
/* Description : Export JSON CSI head                                 */        
/*                                                                    */        
/* Function    : Simple function to store CSI head into JSON file.    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportCSIHead: Procedure Expose c2j.                                            
Parse Arg csi                                                                   
                                                                                
c2j.json.line.0 = 1                                                             
c2j.json.line.1 = '    "'csi'": ['                                              
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportCSITail                                                      */        
/*                                                                    */        
/* Description : Export JSON CSI tail                                 */        
/*                                                                    */        
/* Function    : Simple function to store CSI tail into JSON file.    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportCSITail: Procedure Expose c2j.                                            
                                                                                
c2j.json.line.0 = 1                                                             
c2j.json.line.1 = '    ]'                                                       
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportZones                                                        */        
/*                                                                    */        
/* Description : Export CSI zones into JSON dataset                   */        
/*                                                                    */        
/* Function    : Generic function to export DLIB & TARGET zones of    */        
/*               passed CSI into JSON dataset.                        */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportZones: Procedure Expose c2j.                                              
                                                                                
c2j.json.line.0 = 0                                                             
                                                                                
Do i = 1 To      c2j.zone.target.0                                              
   zname = c2j.zone.target.i                                                    
   Call ExportTARGET zname                                                      
End                                                                             
                                                                                
Do i = 1 To      c2j.zone.dlib.0                                                
   zname = c2j.zone.dlib.i                                                      
   Call ExportDLIB zname                                                        
End                                                                             
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportTARGET                                                       */        
/*                                                                    */        
/* Description : Export CSI TARGET zone into JSON dataset             */        
/*                                                                    */        
/* Function    : Generate CSI TARGET section in the following         */        
/*               format:                                              */        
/*                                                                    */        
/*               {                                                    */        
/*                   "name": "MVST100",                               */        
/*                   "zone": "MVST100",                               */        
/*                   "subentries": {                                  */        
/*                       "RELATED": [                                 */        
/*                           "MVSD100"                                */        
/*                       ],                                           */        
/*                       "SREL": [                                    */        
/*                           "Z038"                                   */        
/*                       ]                                            */        
/*                   },                                               */        
/*                   "type": "TARGETZONE"                             */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI TARGET zone name                            */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportTARGET: Procedure Expose c2j.                                             
Parse Arg zname                                                                 
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '        {'                                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "name": "'c2j.zname.name'",'                                     
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "zone": "'c2j.zname.zone'",'                                     
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "subentries": {'                                                 
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                "RELATED": ['                                                
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                    "'c2j.zname.related'"'                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                ],'                                                          
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                "SREL": ['                                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                    "'c2j.zname.srel'"'                                      
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                ]'                                                           
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            },'                                                              
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "type": "TARGETZONE"'                                            
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '        },'                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportDLIB                                                         */        
/*                                                                    */        
/* Description : Export CSI DLIB zone into JSON dataset               */        
/*                                                                    */        
/* Function    : Generate CSI DLIB section in the following format:   */        
/*                                                                    */        
/*               {                                                    */        
/*                   "name": "MVSD100",                               */        
/*                   "zone": "MVSD100",                               */        
/*                   "subentries": {                                  */        
/*                       "RELATED": [                                 */        
/*                           "MVST100"                                */        
/*                       ],                                           */        
/*                       "SREL": [                                    */        
/*                           "Z038"                                   */        
/*                       ]                                            */        
/*                   },                                               */        
/*                   "type": "DLIBZONE"                               */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI DLIB zone name                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportDLIB: Procedure Expose c2j.                                               
Parse Arg zname                                                                 
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '        {'                                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "name": "'c2j.zname.name'",'                                     
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "zone": "'c2j.zname.zone'",'                                     
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "subentries": {'                                                 
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                "RELATED": ['                                                
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                    "'c2j.zname.related'"'                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                ],'                                                          
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                "SREL": ['                                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                    "'c2j.zname.srel'"'                                      
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '                ]'                                                           
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            },'                                                              
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "type": "DLIBZONE"'                                              
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '        },'                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportProducts                                                     */        
/*                                                                    */        
/* Description : Export CSI products into JSON dataset                */        
/*                                                                    */        
/* Function    : Generate CSI products section in the following       */        
/*               format:                                              */        
/*                                                                    */        
/*               {                                                    */        
/*                   "name": "",                                      */        
/*                   "zone": "GLOBAL",                                */        
/*                   "subentries": {                                  */        
/*                       "DESCRIPTION": [                             */        
/*                           "DITTO/ESA FOR MVS"                      */        
/*                       ],                                           */        
/*                       "PRODID": [                                  */        
/*                           "5655-103"                               */        
/*                       ],                                           */        
/*                       "RECDATE": [                                 */        
/*                           "20224"                                  */        
/*                       ],                                           */        
/*                       "RECTIME": [                                 */        
/*                           "06:36:39"                               */        
/*                       ],                                           */        
/*                       "REWORK": [                                  */        
/*                           "1999182"                                */        
/*                       ],                                           */        
/*                       "SREL": [                                    */        
/*                           "Z038"                                   */        
/*                       ],                                           */        
/*                       "VENDOR": [                                  */        
/*                           "IBM"                                    */        
/*                       ],                                           */        
/*                       "VRM": [                                     */        
/*                           "01.03.00"                               */        
/*                       ],                                           */        
/*                       "PRODSUP": [                                 */        
/*                           "5655-103,01.02.00",                     */        
/*                           "5655-103,01.01.00",                     */        
/*                           "5695-100,02.01.00"                      */        
/*                       ]                                            */        
/*                   },                                               */        
/*                   "type": "PRODUCT"                                */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportProducts: Procedure Expose c2j.                                           
                                                                                
Do i = 1 To c2j.GLOBAL.product.0                                                
   description# = JsonEscapeChar(c2j.GLOBAL.product.i.description)              
                                                                                
   c2j.json.line.0  = 28                                                        
   c2j.json.line.1  = '        {'                                               
   c2j.json.line.2  = '            "name": "",'                                 
   c2j.json.line.3  = '            "zone": "GLOBAL",'                           
   c2j.json.line.4  = '            "subentries": {'                             
   c2j.json.line.5  = '                "DESCRIPTION": ['                        
   c2j.json.line.6  = ,                                                         
   '                    "'description#'"'                                       
   c2j.json.line.7  = '                ],'                                      
   c2j.json.line.8  = '                "PRODID": ['                             
   c2j.json.line.9  = ,                                                         
   '                    "'c2j.GLOBAL.product.i.prodid'"'                        
   c2j.json.line.10 = '                ],'                                      
   c2j.json.line.11 = '                "RECDATE": ['                            
   c2j.json.line.12 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.recdate'"'                       
   c2j.json.line.13 = '                ],'                                      
   c2j.json.line.14 = '                "RECTIME": ['                            
   c2j.json.line.15 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.rectime'"'                       
   c2j.json.line.16 = '                ],'                                      
   c2j.json.line.17 = '                "REWORK": ['                             
   c2j.json.line.18 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.rework'"'                        
   c2j.json.line.19 = '                ],'                                      
   c2j.json.line.20 = '                "SREL": ['                               
   c2j.json.line.21 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.srel'"'                          
   c2j.json.line.22 = '                ],'                                      
   c2j.json.line.23 = '                "VENDOR": ['                             
   c2j.json.line.24 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.vendor'"'                        
   c2j.json.line.25 = '                ],'                                      
   c2j.json.line.26 = '                "VRM": ['                                
   c2j.json.line.27 = ,                                                         
   '                    "'c2j.GLOBAL.product.i.vrm'"'                           
   c2j.json.line.28 = '                ],'                                      
                                                                                
   If c2j.GLOBAL.product.i.prodsup.0 > 0 Then Do                                
      n = c2j.json.line.0 + 1                                                   
      c2j.json.line.0 = n                                                       
      c2j.json.line.n = '                "PRODSUP": ['                          
                                                                                
      Do j = 1 To c2j.GLOBAL.product.i.prodsup.0                                
         n = c2j.json.line.0 + 1                                                
         c2j.json.line.0 = n                                                    
         c2j.json.line.n = ,                                                    
         '                    "'c2j.GLOBAL.product.i.prodsup.j'",'              
      End                                                                       
                                                                                
      /* Strip last ',' character */                                            
      n = c2j.json.line.0                                                       
      c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                 
                                                                                
      n = c2j.json.line.0 + 1                                                   
      c2j.json.line.0 = n                                                       
      c2j.json.line.n = '                ],'                                    
   End                                                                          
                                                                                
   /* Strip last ',' character */                                               
   n = c2j.json.line.0                                                          
   c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '            },'                                           
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '            "type": "PRODUCT"'                            
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '        },'                                               
                                                                                
   Call FlushJson                                                               
                                                                                
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportFeatures                                                     */        
/*                                                                    */        
/* Description : Export CSI features into JSON dataset                */        
/*                                                                    */        
/* Function    : Generate CSI features section in the following       */        
/*               format:                                              */        
/*                                                                    */        
/*               {                                                    */        
/*                   "name": "IDITE130",                              */        
/*                   "zone": "GLOBAL",                                */        
/*                   "subentries": {                                  */        
/*                       "DESCRIPTION": [                             */        
/*                           "DITTO/ESA FOR MVS"                      */        
/*                       ],                                           */        
/*                       "PRODUCT": [                                 */        
/*                           "5655-103,01.03.00"                      */        
/*                       ],                                           */        
/*                       "RECDATE": [                                 */        
/*                           "20224"                                  */        
/*                       ],                                           */        
/*                       "RECTIME": [                                 */        
/*                           "06:36:39"                               */        
/*                       ],                                           */        
/*                       "REWORK": [                                  */        
/*                           "1999182"                                */        
/*                       ],                                           */        
/*                       "FMID": [                                    */        
/*                           "H0GB310"                                */        
/*                       ]                                            */        
/*                   },                                               */        
/*                   "type": "FEATURE"                                */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportFeatures: Procedure Expose c2j.                                           
                                                                                
Do i = 1 To c2j.GLOBAL.feature.0                                                
   description# = JsonEscapeChar(c2j.GLOBAL.feature.i.description)              
                                                                                
   c2j.json.line.0  = 20                                                        
   c2j.json.line.1  = '        {'                                               
   c2j.json.line.2  = ,                                                         
   '            "name": "'c2j.GLOBAL.feature.i.name'",'                         
   c2j.json.line.3  = '            "zone": "GLOBAL",'                           
   c2j.json.line.4  = '            "subentries": {'                             
   c2j.json.line.5  = '                "DESCRIPTION": ['                        
   c2j.json.line.6  = ,                                                         
   '                    "'description#'"'                                       
   c2j.json.line.7  = '                ],'                                      
   c2j.json.line.8  = '                "PRODUCT": ['                            
   c2j.json.line.9  = ,                                                         
   '                    "'c2j.GLOBAL.feature.i.product'"'                       
   c2j.json.line.10 = '                ],'                                      
   c2j.json.line.11 = '                "RECDATE": ['                            
   c2j.json.line.12 = ,                                                         
   '                    "'c2j.GLOBAL.feature.i.recdate'"'                       
   c2j.json.line.13 = '                ],'                                      
   c2j.json.line.14 = '                "RECTIME": ['                            
   c2j.json.line.15 = ,                                                         
   '                    "'c2j.GLOBAL.feature.i.rectime'"'                       
   c2j.json.line.16 = '                ],'                                      
   c2j.json.line.17 = '                "REWORK": ['                             
   c2j.json.line.18 = ,                                                         
   '                    "'c2j.GLOBAL.feature.i.rework'"'                        
   c2j.json.line.19 = '                ],'                                      
   c2j.json.line.20 = '                "FMID": ['                               
                                                                                
   Do j = 1 To c2j.GLOBAL.feature.i.fmid.0                                      
      n = c2j.json.line.0 + 1                                                   
      c2j.json.line.0 = n                                                       
      c2j.json.line.n = ,                                                       
      '                    "'c2j.GLOBAL.feature.i.fmid.j'",'                    
   End                                                                          
                                                                                
   /* Strip last ',' character */                                               
   n = c2j.json.line.0                                                          
   c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                ]'                                        
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '            },'                                           
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '            "type": "FEATURE"'                            
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '        },'                                               
                                                                                
   Call FlushJson                                                               
                                                                                
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportSysmods                                                      */        
/*                                                                    */        
/* Description : Export CSI SYSMODs into JSON dataset                 */        
/*                                                                    */        
/* Function    : Generic function to export SYSMODs into JSON         */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportSysmods: Procedure Expose c2j.                                            
                                                                                
c2j.json.line.0 = 0                                                             
                                                                                
Do i = 1 To      c2j.zone.target.0                                              
   zname = c2j.zone.target.i                                                    
   Call FilterSysmods zname                                                     
End                                                                             
                                                                                
Do i = 1 To      c2j.zone.dlib.0                                                
   zname = c2j.zone.dlib.i                                                      
   Call FilterSysmods zname                                                     
End                                                                             
                                                                                
/* Strip last ',' character */                                                  
n = c2j.json.line.0                                                             
c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                       
                                                                                
Call FlushJson                                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* FilterSysmods                                                      */        
/*                                                                    */        
/* Description : Filter SYSMODs                                       */        
/*                                                                    */        
/* Function    : Selects specific CSI zone SYSMODs for export         */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI zone name                                   */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
FilterSysmods: Procedure Expose c2j.                                            
Parse Arg zname                                                                 
                                                                                
Do i = 1 To c2j.zname.sysmods.0                                                 
   sname = c2j.zname.sysmods.i                                                  
                                                                                
   Select                                                                       
     When c2j.zname.sysmods.sname.type = 'FUNCTION' Then                        
       Nop                                                                      
     When c2j.zname.sysmods.sname.type = 'PTF' Then                             
       Nop                                                                      
     When c2j.zname.sysmods.sname.type = 'APAR' Then                            
       Nop                                                                      
     When c2j.zname.sysmods.sname.type = 'USERMOD' Then                         
       Nop                                                                      
     Otherwise                                                                  
       Iterate                                                                  
   End                                                                          
                                                                                
   Select                                                                       
     When c2j.zname.sysmods.sname.apply  = 'YES' Then                           
       Nop                                                                      
     When c2j.zname.sysmods.sname.accept = 'YES' Then                           
       Nop                                                                      
     Otherwise                                                                  
       Iterate                                                                  
   End                                                                          
                                                                                
   Call ExportSysmod zname, sname                                               
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportSysmod                                                       */        
/*                                                                    */        
/* Description : Export SYSMOD into JSON dataset                      */        
/*                                                                    */        
/* Function    : Generate SYSMOD section in the following format:     */        
/*                                                                    */        
/*               {                                                    */        
/*                   "name": "UK07292",                               */        
/*                   "zone": "MVST100",                               */        
/*                   "subentries": {                                  */        
/*                       "APPLY": [                                   */        
/*                           "YES"                                    */        
/*                       ],                                           */        
/*                       "FMID": [                                    */        
/*                           "H0GB310"                                */        
/*                       ],                                           */        
/*                       "RECDATE": [                                 */        
/*                           "20224"                                  */        
/*                       ],                                           */        
/*                       "RECTIME": [                                 */        
/*                           "06:36:41"                               */        
/*                       ],                                           */        
/*                       "SMODTYPE": [                                */        
/*                           "PTF"                                    */        
/*                       ],                                           */        
/*                       "VER": [                                     */        
/*                           {                                        */        
/*                               "subtype": "SUPING",                 */        
/*                               "ver": "1",                          */        
/*                               "items": [                           */        
/*                                   "AK01104",                       */        
/*                                   "AK05922",                       */        
/*                                   "AK09087",                       */        
/*                                   "UK00974",                       */        
/*                                   "UK03843"                        */        
/*                               ]                                    */        
/*                           }                                        */        
/*                       ]                                            */        
/*                   },                                               */        
/*                   "type": "SYSMOD"                                 */        
/*               },                                                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI DLIB/TARGET zone name                       */        
/*  sname             SYSMOD name                                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportSysmod: Procedure Expose c2j.                                             
Parse Arg zname, sname                                                          
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '        {'                                                   
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = ,                                                             
  '            "name": "'c2j.zname.sysmods.sname.name'",'                       
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '            "zone": "'zname'",'                              
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '            "subentries": {'                                 
                                                                                
If c2j.zname.sysmods.sname.accept = 'YES' Then Do                               
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "ACCEPT": ['                              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.accept'"'                   
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
                                                                                
If c2j.zname.sysmods.sname.apply = 'YES' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "APPLY": ['                               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.apply'"'                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.bypass = 'YES' Then Do                               
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "BYPASS": ['                              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.bypass'"'                   
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.dellmod = 'YES' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "DELLMOD": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.dellmod'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.elemmov = 'YES' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "ELEMMOV": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.elemmov'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.error = 'YES' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "ERROR": ['                               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.error'"'                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.jclin = 'YES' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "JCLIN": ['                               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.jclin'"'                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.regen = 'YES' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "REGEN": ['                               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.regen'"'                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.receive = 'YES' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "RECEIVE": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.receive'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.renlmod = 'YES' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "RENLMOD": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.renlmod'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.restore = 'YES' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "RESTORE": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.restore'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
                                                                                
If c2j.zname.sysmods.sname.description \= '' Then Do                            
                                                                                
   description# = JsonEscapeChar(c2j.zname.sysmods.sname.description)           
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "DESCRIPTION": ['                         
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'description#'"'                                     
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.applyzone \= '' Then Do                              
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "APPLYZONE": ['                           
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.applyzone'"'                
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.delby \= '' Then Do                                  
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "DELBY": ['                               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.delby'"'                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.feature.0 > 0 Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "FEATURE": ['                             
                                                                                
   Do j = 1 To c2j.zname.sysmods.sname.feature.0                                
      n = c2j.json.line.0 + 1                                                   
      c2j.json.line.0 = n                                                       
      c2j.json.line.n = ,                                                       
      '                    "'c2j.zname.sysmods.sname.feature.j'",'              
   End                                                                          
                                                                                
   /* Strip last ',' character */                                               
   n = c2j.json.line.0                                                          
   c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.fesn \= '' Then Do                                   
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "FESN": ['                                
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.fesn'"'                     
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.fmid \= '' Then Do                                   
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "FMID": ['                                
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.fmid'"'                     
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.installdate \= '' Then Do                            
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "INSTALLDATE": ['                         
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.installdate'"'              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.installtime \= '' Then Do                            
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "INSTALLTIME": ['                         
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.installtime'"'              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
/*                                                                              
If c2j.zname.sysmods.sname.lastsup \= '' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "LASTSUP": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.lastsup'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.recdate \= '' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "RECDATE": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.recdate'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
                                                                                
If c2j.zname.sysmods.sname.rectime \= '' Then Do                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "RECTIME": ['                             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.rectime'"'                  
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
                                                                                
If c2j.zname.sysmods.sname.rework \= '' Then Do                                 
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "REWORK": ['                              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.rework'"'                   
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
/*                                                                              
If c2j.zname.sysmods.sname.tlibprefix \= '' Then Do                             
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "TLIBPREFIX": ['                          
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.tlibprefix'"'               
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
*/                                                                              
If c2j.zname.sysmods.sname.smodtype \= '' Then Do                               
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                "SMODTYPE": ['                            
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                    "'c2j.zname.sysmods.sname.smodtype'"'                 
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = ,                                                          
     '                ],'                                                       
End                                                                             
                                                                                
If c2j.zname.sysmods.sname.ver.suping.0 \= 0 Then Do                            
                                                                                
   Call ExportVer zname, sname                                                  
                                                                                
End                                                                             
                                                                                
/* Strip trainling ',' character */                                             
n = c2j.json.line.0                                                             
c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                       
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '            },'                                              
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '            "type": "SYSMOD"'                                
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '        },'                                                  
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportVer                                                          */        
/*                                                                    */        
/* Description : Export SYSMOD VER section                            */        
/*                                                                    */        
/* Function    : Generic function to export SYSMOD VER section.       */        
/*               Generates head & tail of the data and calls          */        
/*               appropriate functions to perform export.             */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportVer: Procedure Expose c2j.                                                
Parse Arg zname, sname                                                          
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '                "VER": ['                                    
                                                                                
Call ExportVerSuping zname, sname                                               
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '                ],'                                          
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* ExportVerSuping                                                    */        
/*                                                                    */        
/* Description : Export SYSMOD VER SUPING section                     */        
/*                                                                    */        
/* Function    : Generate SYSMOD VER SUPING section in the following  */        
/*               format:                                              */        
/*                                                                    */        
/*               {                                                    */        
/*                   "subtype": "SUPING",                             */        
/*                   "ver": "1",                                      */        
/*                   "items": [                                       */        
/*                       "AK01104",                                   */        
/*                       "AK05922",                                   */        
/*                       "AK09087",                                   */        
/*                       "UK00974",                                   */        
/*                       "UK03843"                                    */        
/*                   ]                                                */        
/*               }                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI DLIB/TARGET zone name                       */        
/*  sname             SYSMOD name                                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
ExportVerSuping: Procedure Expose c2j.                                          
Parse Arg zname, sname                                                          
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '                    {'                                       
                                                                                
Do k = 1 To c2j.zname.sysmods.sname.ver.suping.0                                
   vern = c2j.zname.sysmods.sname.ver.suping.k                                  
   ver# = vern + 0                                                              
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                        "subtype": "SUPING",'             
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                        "ver": "'ver#'",'                 
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                        "items": ['                       
                                                                                
   Do x = 1 To c2j.zname.sysmods.sname.ver.suping.vern.0                        
                                                                                
      n = c2j.json.line.0 + 1                                                   
      c2j.json.line.0 = n                                                       
      c2j.json.line.n = ,                                                       
      '                            "' || ,                                      
      c2j.zname.sysmods.sname.ver.suping.vern.x'",'                             
                                                                                
   End                                                                          
                                                                                
   /* Strip trainling ',' character */                                          
   c2j.json.line.n = STRIP(c2j.json.line.n, 'Trailing', ',')                    
                                                                                
   n = c2j.json.line.0 + 1                                                      
   c2j.json.line.0 = n                                                          
   c2j.json.line.n = '                        ]'                                
End                                                                             
                                                                                
n = c2j.json.line.0 + 1                                                         
c2j.json.line.0 = n                                                             
c2j.json.line.n = '                    }'                                       
                                                                                
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* JsonEscapeChar                                                     */        
/*                                                                    */        
/* Description : Mirror string with escape charactes                  */        
/*                                                                    */        
/* Function    : Adds escape characters for the string to comply with */        
/*               JSON strings.                                        */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  in                string to convert                               */        
/*                                                                    */        
/* Output:                                                            */        
/*  -----------       ----------------------------------------------- */        
/*  out               Converted string containing escape characters   */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
JsonEscapeChar: Procedure                                                       
Parse Arg in                                                                    
                                                                                
out = ''                                                                        
part = ''                                                                       
Do While in \= ''                                                               
   Parse Var in part '"' in                                                     
   If in \= '' Then                                                             
      out = out || part || '\"'                                                 
End                                                                             
out = out || part                                                               
                                                                                
Return out                                                                      
                                                                                
/**********************************************************************/        
/* FlushJson                                                          */        
/*                                                                    */        
/* Description : Flushes JSON string buffer into DASD                 */        
/*                                                                    */        
/* Function    : Issues EXECIO to flush c2j.json.line. stem variable  */        
/*               into allocated JSON DD.                              */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  finis             Indicate EXECIO to close dataset                */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure                                         */        
/*                                                                    */        
/**********************************************************************/        
FlushJson: Procedure Expose c2j.                                                
Parse Arg finis                                                                 
                                                                                
ADDRESS MVS 'EXECIO' c2j.json.line.0 ,                                          
            'DISKW JSON (STEM c2j.json.line. 'finis')'                          
If rc \= 0 Then Do                                                              
   Say ' ERROR: RETURN CODE' rc 'FROM EXECIO ATTEMPTING TO'                     
   Say "        WRITE '"c2j.json.dsname"'"                                      
   Call Terminate rc                                                            
End                                                                             
                                                                                
Return 0                                                                        
/**********************************************************************/        
/* GetCSI                                                             */        
/*                                                                    */        
/* Description : Retrieve the CSI VSAM information.                   */        
/*                                                                    */        
/* Function    : Retrieve PRODUCTs, FEATUREs and SYSMODs for GLOBAL   */        
/*               zone as well as SYSMODs for TARGET & DLIB for passed */        
/*               CSI VSAM.                                            */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetCSI: Procedure Expose c2j.                                                   
Parse Arg csi                                                                   
                                                                                
Say DATE('N') TIME('N') 'Processing GLOBAL zone.'                               
Call GetGlobal(csi)                                                             
                                                                                
Do i = 1 To      c2j.zone.target.0                                              
   zname = c2j.zone.target.i                                                    
   Say DATE('N') TIME('N') 'Processing' zname 'zone.'                           
   Call GetTLIB csi, zname                                                      
End                                                                             
                                                                                
Do i = 1 To      c2j.zone.dlib.0                                                
   zname = c2j.zone.dlib.i                                                      
   Say DATE('N') TIME('N') 'Processing' zname 'zone.'                           
   Call GetDLIB csi, zname                                                      
End                                                                             
                                                                                
Return 0                                                                        
/**********************************************************************/        
/* Initialize                                                         */        
/*                                                                    */        
/* Description : Initializes REXX script                              */        
/*                                                                    */        
/* Function    : Performs all initial steps:                          */        
/*               initialize variables, subsystems, etc. to get script */        
/*               ready to run.                                        */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/**********************************************************************/        
Initialize:                                                                     
Say DATE('N') TIME('N') 'Starting CSI2JSON REXX, Version=' || ,                 
    c2j.script.version                                                          
Return                                                                          
                                                                                
/**********************************************************************/        
/* Terminate                                                          */        
/*                                                                    */        
/* Description : Terminates REXX script                               */        
/*                                                                    */        
/* Function    : Flush buffers to disk and free any holded resources. */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  ret               Return code to exit                             */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*  ret               Passed return code                              */        
/*                                                                    */        
/**********************************************************************/        
Terminate:                                                                      
Parse Arg ret                                                                   
Say DATE('N') TIME('N') 'Terminating CSI2JSON REXX, RC='ret                     
Exit ret                                                                        
                                                                                
/**********************************************************************/        
/* GetGlobal                                                          */        
/*                                                                    */        
/* Description : Retrieve the list of CSI zones.                      */        
/*                                                                    */        
/* Function    : Invoke SMP/E LIST GZONE command, parse the output    */        
/*               and fill c2j.zone. stem.                             */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure, see log for details.                   */        
/*                                                                    */        
/**********************************************************************/        
GetGlobal: Procedure Expose c2j.                                                
Parse Arg csi                                                                   
                                                                                
Call SMPELIST csi, 'GLOBAL', 'GLOBALZONE PRODUCT FEATURE SYSMODS'               
                                                                                
Do i = 1 To c2j.smplist.line.0                                                  
                                                                                
   /* Search for beginning of the GLOBAL zone entries which are       */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   GLOBAL    UPGLEVEL        = SMP/E 37.04                       */        
   /*                                                                 */        
   /* Process all GLOBAL zone entries in a separate function.         */        
   Parse Var c2j.smplist.line.i 'GLOBAL    UPGLEVEL        =' smpe_ver          
   If smpe_ver \= '' Then Do                                                    
      i = GetZoneIndex(i)                                                       
   End                                                                          
   /* Search for beginning of the PRODUCT entries which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   GLOBAL  PRODUCT  ENTRIES                                      */        
   /*                                                                 */        
   /* Process all PRODUCTs in a separate function.                    */        
   If c2j.smplist.line.i = 'GLOBAL  PRODUCT  ENTRIES' Then Do                   
      i = GetProducts(i)                                                        
   End                                                                          
   /* Search for beginning of the FEATURE entries which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   GLOBAL  FEATURE  ENTRIES                                      */        
   /*                                                                 */        
   /* Process all PRODUCTs in a separate function.                    */        
   If c2j.smplist.line.i = 'GLOBAL  FEATURE  ENTRIES' Then Do                   
      i = GetFeatures(i)                                                        
   End                                                                          
   /* Search for beginning of the SYSMODS entries which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   _name_   SYSMOD ENTRIES                                       */        
   /*                                                                 */        
   /* Process all SYSMODs in a separate function.                     */        
   Parse Var c2j.smplist.line.i zone# other#                                    
   If STRIP(zone#) = 'GLOBAL' & STRIP(other#) = 'SYSMOD ENTRIES' Then Do        
      i = GetSYSMODs(zone#, i)                                                  
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* GetZoneIndex                                                       */        
/*                                                                    */        
/* Description : Get list of TARGET/DLIB zones.                       */        
/*                                                                    */        
/* Function    : Search for ZONEINDEX entries and pass zones          */        
/*               extraction to the GetZones function.                 */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    GLOBAL zone entries start.                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetZoneIndex: Procedure Expose c2j.                                             
Parse Arg idx                                                                   
                                                                                
Do i = idx To c2j.smplist.line.0                                                
   /* Search for beginning of the ZONEINDEX entries which are         */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   ZONEINDEX       = * ZONE *  * TYPE *  * VSAM *                */        
   /*                                                                 */        
   /* Process all ZONEINDEX entries in separate function.             */        
   Parse Var c2j.smplist.line.i 'ZONEINDEX       =' name type vsam              
   If name \= '' Then                                                           
      Return GetZones(i)                                                        
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetZones                                                           */        
/*                                                                    */        
/* Description : Get list of TARGET/DLIB zones.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               TARGET/DLIB zone name, type & VSAM.                  */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    ZONEINDEX entries start.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetZones: Procedure Expose c2j.                                                 
Parse Arg idx                                                                   
                                                                                
/* Parse 1st line of the ZONEINDEX which contains ZONE, TYPE & VSAM   */        
/*                                                                    */        
/*ZONEINDEX       = ARM#01D  DLIB     SMPE.ARMHSM.NWPM.VSPMTG3.D00.CSI*/        
/*                  ARM#01T  TARGET   SMPE.ARMHSM.NWPM.VSPMTG3.T00.CSI*/        
/*                  CNR#01D  DLIB     SMPE.CONSUL.NWPM.VSPMTG3.D00.CSI*/        
/*                  CNR#01T  TARGET   SMPE.CONSUL.NWPM.VSPMTG3.T00.CSI*/        
                                                                                
Parse Var c2j.smplist.line.idx 'ZONEINDEX       =' name type vsam               
Call AddZone name, type, vsam                                                   
                                                                                
/* Parse the rest                                                     */        
Do i = idx + 1 To c2j.smplist.line.0                                            
   /* Search for end of the ZONEINDEX entries which are               */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   SREL            = * SREL *                                    */        
   /*                                                                 */        
   /* Return SREL index if found.                                     */        
   Parse Var c2j.smplist.line.i 'SREL            =' srel                        
   If srel \= '' Then Return i                                                  
                                                                                
   If IsTrash(c2j.smplist.line.i) = 'YES' Then Iterate                          
                                                                                
   /* Skip 'GLOBAL  ZONE ENTRIES' lines */                                      
   If STRIP(c2j.smplist.line.i) = 'GLOBAL  ZONE ENTRIES' Then Iterate           
                                                                                
   Parse Var c2j.smplist.line.i name type vsam                                  
   Call AddZone name, type, vsam                                                
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetProducts                                                        */        
/*                                                                    */        
/* Description : Get list of GLOBAL zone products.                    */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               productds installed in the GLOBAL zone to store them */        
/*               into the following stem variable:                    */        
/*                                                                    */        
/* c2j.GLOBAL.product.n.prodid  = '5635-ISP'                          */        
/* c2j.GLOBAL.product.n.vrm     = '08.01.00'                          */        
/* c2j.GLOBAL.product.n.description =                                 */        
/*                              'IBM Data Set Commander for z/OS V8.1 */        
/* c2j.GLOBAL.product.n.rework  = '2013337'                           */        
/* c2j.GLOBAL.product.n.recdate = '20034'                             */        
/* c2j.GLOBAL.product.n.rectime = '12:02:56'                          */        
/* c2j.GLOBAL.product.n.vendor  = 'IBM'                               */        
/* c2j.GLOBAL.product.n.prodsup.0 = 5                                 */        
/* c2j.GLOBAL.product.n.prodsup.1 = '5655-SPF,07.01.00'               */        
/* c2j.GLOBAL.product.n.prodsup.2 = '5698-R21,06.01.00'               */        
/* c2j.GLOBAL.product.n.prodsup.3 = '5698-A81,05.10.00'               */        
/* c2j.GLOBAL.product.n.prodsup.4 = '5698-A81,05.09.00'               */        
/* c2j.GLOBAL.product.n.prodsup.5 = '5698-A81,05.08.00'               */        
/* c2j.GLOBAL.product.n.srel    = 'Z038'                              */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    GLOBAL  PRODUCT  ENTRIES exist.                 */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetProducts: Procedure Expose c2j.                                              
Parse Arg idx                                                                   
                                                                                
n = c2j.GLOBAL.product.0 + 1                                                    
c2j.GLOBAL.product.n.prodsup.0 = 0                                              
                                                                                
/* Parse the GLOBAL  PRODUCT  ENTRIES                                 */        
Do i = idx To c2j.smplist.line.0                                                
   /* Search for end of the GLOBAL  PRODUCT  ENTRIES which are        */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   GLOBAL  FEATURE  ENTRIES                                      */        
   /*                                                                 */        
   /* Return GLOBAL  FEATURE  ENTRIES index if found.                 */        
   If c2j.smplist.line.i = 'GLOBAL  FEATURE  ENTRIES' Then Return i             
                                                                                
   If IsTrash(c2j.smplist.line.i) = 'YES' Then Iterate                          
                                                                                
   /* Skip 'GLOBAL  ZONE ENTRIES' lines */                                      
   If STRIP(c2j.smplist.line.i) = 'GLOBAL  PRODUCT  ENTRIES' Then               
      Iterate                                                                   
                                                                                
   /* Get VRM field */                                                          
   Parse Var c2j.smplist.line.i prodid# 'VRM             =' vrm#                
   If vrm# \= '' Then Do                                                        
      c2j.GLOBAL.product.n.prodid = STRIP(prodid#)                              
      c2j.GLOBAL.product.n.vrm    = STRIP(vrm#)                                 
   End                                                                          
                                                                                
   /* Get DESCRIPTION field */                                                  
   Parse Var c2j.smplist.line.i 'DESCRIPTION     =' description#                
   If description# \= '' Then Do                                                
      c2j.GLOBAL.product.n.description = STRIP(description#)                    
   End                                                                          
                                                                                
   /* Get REWORK field */                                                       
   Parse Var c2j.smplist.line.i 'REWORK          =' rework#                     
   If rework# \= '' Then Do                                                     
      c2j.GLOBAL.product.n.rework = STRIP(rework#)                              
   End                                                                          
                                                                                
   /* Get DATE/TIME REC field */                                                
   Parse Var c2j.smplist.line.i 'DATE/TIME REC   =' dtrec#                      
   If dtrec# \= '' Then Do                                                      
      Parse Var dtrec# yy '.' ddd hhmmss                                        
      c2j.GLOBAL.product.n.recdate = STRIP(yy || ddd)                           
      c2j.GLOBAL.product.n.rectime = STRIP(hhmmss)                              
   End                                                                          
                                                                                
   /* Get VENDOR field */                                                       
   Parse Var c2j.smplist.line.i 'VENDOR          =' vendor#                     
   If vendor# \= '' Then Do                                                     
      c2j.GLOBAL.product.n.vendor = STRIP(vendor#)                              
   End                                                                          
                                                                                
   /* Get PRODSUP fields */                                                     
   Parse Var c2j.smplist.line.i 'PRODSUP         =' prodsup#                    
   If prodsup# \= '' Then Do                                                    
      Do While prodsup# \= ''                                                   
         Parse Var prodsup# prodid# vrm# prodsup#                               
         k = c2j.GLOBAL.product.n.prodsup.0 + 1                                 
         c2j.GLOBAL.product.n.prodsup.0 = k                                     
         c2j.GLOBAL.product.n.prodsup.k = prodid#','vrm#                        
      End                                                                       
      Do j = i + 1 To c2j.smplist.line.0                                        
         Parse Var c2j.smplist.line.j 'SREL            =' srel#                 
         If srel# \= '' Then Do                                                 
            i = j                                                               
            Leave                                                               
         End                                                                    
                                                                                
         Parse Var c2j.smplist.line.j '                =' prodsup#              
         Do While prodsup# \= ''                                                
            Parse Var prodsup# prodid# vrm# prodsup#                            
            k = c2j.GLOBAL.product.n.prodsup.0 + 1                              
            c2j.GLOBAL.product.n.prodsup.0 = k                                  
            c2j.GLOBAL.product.n.prodsup.k = prodid#','vrm#                     
         End                                                                    
      End                                                                       
                                                                                
   End                                                                          
                                                                                
   /* Get SREL field */                                                         
   Parse Var c2j.smplist.line.i 'SREL            =' srel#                       
   If srel# \= '' Then Do                                                       
      c2j.GLOBAL.product.n.srel = STRIP(srel#)                                  
                                                                                
      c2j.GLOBAL.product.0 = n                                                  
      n = n + 1                                                                 
      c2j.GLOBAL.product.n.prodsup.0 = 0                                        
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetFeatures                                                        */        
/*                                                                    */        
/* Description : Get list of GLOBAL zone features.                    */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               features installed in the GLOBAL zone to store them  */        
/*               into the following stem variable:                    */        
/*                                                                    */        
/* c2j.GLOBAL.feature.n.name    = 'DZOBB240'                          */        
/* c2j.GLOBAL.feature.n.description =                                 */        
/*                   'z/OS V2 Base OPT. Features Installed with Base' */        
/* c2j.GLOBAL.feature.n.rework  = '2019268'                           */        
/* c2j.GLOBAL.feature.n.recdate = '20034'                             */        
/* c2j.GLOBAL.feature.n.rectime = '12:37:07'                          */        
/* c2j.GLOBAL.feature.n.product = '5650-ZOS,02.04.00'                 */        
/* c2j.GLOBAL.feature.n.fmid.0 = 15                                   */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HCM1H10'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HGD3201'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HJS77C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HLB77C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HMOS705'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HNET7C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HOPI7C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HQX77C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HRF77C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HRM77C0'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'HSM1P00'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'H24P111'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'JBD6201'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'JBD6202'                            */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'JMQ416A'                            */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    GLOBAL  FEATURE  ENTRIES exist.                 */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
GetFeatures: Procedure Expose c2j.                                              
Parse Arg idx                                                                   
                                                                                
zname = 'GLOBAL'                                                                
n = c2j.zname.feature.0                                                         
                                                                                
/* Parse the GLOBAL  FEATURE  ENTRIES                                 */        
Do i = idx To c2j.smplist.line.0                                                
                                                                                
   /* Return line # if END-OF-FEATURES found.                         */        
   If IsEndOfFeatures(c2j.smplist.line.i) = 'YES' Then                          
      Return i                                                                  
                                                                                
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then                       
      Iterate                                                                   
                                                                                
   /* Get DESCRIPTION field */                                                  
   Parse Var c2j.smplist.line.i name# 'DESCRIPTION     =' description#          
   If name# \= '' & description# \= '' Then Do                                  
      /* This is the beginning of new FEATURE block.                  */        
      /* Increment stem index.                                        */        
      n = c2j.zname.feature.0 + 1                                               
      c2j.zname.feature.0 = n                                                   
      c2j.zname.feature.n.fmid.0 = 0                                            
      /* ... and fill 1st data variables */                                     
      c2j.zname.feature.n.name        = STRIP(name#)                            
      c2j.zname.feature.n.description = STRIP(description#)                     
   End                                                                          
                                                                                
   /* Get REWORK field */                                                       
   Parse Var c2j.smplist.line.i 'REWORK          =' rework#                     
   If rework# \= '' Then Do                                                     
      c2j.zname.feature.n.rework = STRIP(rework#)                               
   End                                                                          
                                                                                
   /* Get DATE/TIME REC field */                                                
   Parse Var c2j.smplist.line.i 'DATE/TIME REC   =' dtrec#                      
   If dtrec# \= '' Then Do                                                      
      Parse Var dtrec# yy '.' ddd hhmmss                                        
      c2j.zname.feature.n.recdate = STRIP(yy || ddd)                            
      c2j.zname.feature.n.rectime = STRIP(hhmmss)                               
   End                                                                          
                                                                                
   /* Get PRODUCT field */                                                      
   Parse Var c2j.smplist.line.i 'PRODUCT         =' prodid# vrm#                
   If prodid# \= '' Then Do                                                     
      c2j.zname.feature.n.product = STRIP(prodid#)','STRIP(vrm#)                
   End                                                                          
                                                                                
   /* Get FMID fields */                                                        
   Parse Var c2j.smplist.line.i 'FMID            =' fmid_list#                  
   If fmid_list# \= '' Then Do                                                  
      i = GetFeatureFMID(zname, n, i, fmid_list#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetFeatureFMID                                                     */        
/*                                                                    */        
/* Description : Get FEATURE FMID entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               FMID  entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.GLOBAL.feature.n.fmid.0 = 3                                    */        
/* c2j.GLOBAL.feature.n.fmid.1 = 'EDU1H01'                            */        
/* c2j.GLOBAL.feature.n.fmid.2 = 'EER3500'                            */        
/* c2j.GLOBAL.feature.n.fmid.3 = 'EMI2220'                            */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  n                 FEATURE # in GLOBAL feature list                */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    FMID ENTRIEs begins.                            */        
/*  initial           1st batch of FMID values                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetFeatureFMID: Procedure Expose c2j.                                           
Parse Arg zname, n, idx, initial                                                
                                                                                
zname    = STRIP(zname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Split FMID list by words                                     */              
/* FMID            = HCM1H10   HGD3201   HJS77C0   HLB77C0      */              
Do While initial \= ''                                                          
   Parse Var initial fmid# initial                                              
   k = c2j.zname.feature.n.fmid.0 + 1                                           
   c2j.zname.feature.n.fmid.0 = k                                               
   c2j.zname.feature.n.fmid.k = fmid#                                           
End                                                                             
                                                                                
                                                                                
/* Parse GLOBAL  FEATURE  ENTRIES                                     */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Check for the END-OF-FEATURES statement */                                
   If IsEndOfFeatures(c2j.smplist.line.i) = 'YES' Then                          
      Return i - 1                                                              
                                                                                
   /* Check for the END-OF-FMID statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then                       
      Iterate                                                                   
                                                                                
   /* Get next batch of FMID values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial fmid# initial                                           
      k = c2j.zname.feature.n.fmid.0 + 1                                        
      c2j.zname.feature.n.fmid.0 = k                                            
      c2j.zname.feature.n.fmid.k = fmid#                                        
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* IsTrash                                                            */        
/*                                                                    */        
/* Description : Checks passed line for insignificant string.         */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains no data and     */        
/*               can be skipped in parsing process, otherwise 'NO'    */        
/*               id returned.                                         */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  string            String value to analize.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains NO DATA                  */        
/*         'NO'       Passed string has something to check.           */        
/*                                                                    */        
/**********************************************************************/        
IsTrash: Procedure                                                              
Parse Arg string                                                                
                                                                                
string = STRIP(string)                                                          
                                                                                
/* Skip 'PAGE 0003  - NOW SET TO GLOBAL ZONE' lines */                          
Parse Var string 'PAGE' page '- NOW SET TO' zone 'ZONE'                         
If page \= '' & zone \= '' Then                                                 
   Return 'YES'                                                                 
                                                                                
/* Skip 'NAME' lines */                                                         
If string = 'NAME' Then                                                         
   Return 'YES'                                                                 
                                                                                
/* Skip empty lines */                                                          
If string = '' Then                                                             
   Return 'YES'                                                                 
                                                                                
Return 'NO'                                                                     
/**********************************************************************/        
/* IsZoneTrash                                                        */        
/*                                                                    */        
/* Description : Checks passed line for insignificant string which    */        
/*               might occure in TARGET/DLIB zone reports.            */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains no data and     */        
/*               can be skipped in parsing process, otherwise 'NO'    */        
/*               id returned.                                         */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zone              TARGET/DLIB zone name.                          */        
/*  string            String value to analize.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains NO DATA                  */        
/*         'NO'       Passed string has something to check.           */        
/*                                                                    */        
/**********************************************************************/        
IsZoneTrash: Procedure                                                          
Parse Arg zone, string                                                          
                                                                                
/* Skip '__ZONE__ ZONE ENTRIES' lines */                                        
Parse Var string zone# other#                                                   
If STRIP(zone#) = zone & STRIP(other#) = 'ZONE ENTRIES' Then                    
   Return 'YES'                                                                 
                                                                                
/* Skip '__ZONE__ SYSMOD ENTRIES' lines */                                      
Parse Var string zone# other#                                                   
If STRIP(zone#) = zone & STRIP(other#) = 'SYSMOD ENTRIES' Then                  
   Return 'YES'                                                                 
                                                                                
/* Skip '__ZONE__ PRODUCT  ENTRIES' lines */                                    
Parse Var string zone# other#                                                   
If STRIP(zone#) = zone & STRIP(other#) = 'PRODUCT  ENTRIES' Then                
   Return 'YES'                                                                 
                                                                                
/* Skip '__ZONE__ FEATURE  ENTRIES' lines */                                    
Parse Var string zone# other#                                                   
If STRIP(zone#) = zone & STRIP(other#) = 'FEATURE  ENTRIES' Then                
   Return 'YES'                                                                 
                                                                                
trash = IsTrash(string)                                                         
                                                                                
Return trash                                                                    
/**********************************************************************/        
/* IsEndOfSysmods                                                     */        
/*                                                                    */        
/* Description : Checks if passed line contains end of SYSMODs value. */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains end of SYSMODs  */        
/*               statement, otherwise 'NO' is returned.               */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name.                          */        
/*  string            String value to analize.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains end of SYSMODs.          */        
/*         'NO'       Passed string does not contain end of SYSMODs.  */        
/*                                                                    */        
/**********************************************************************/        
IsEndOfSysmods: Procedure                                                       
Parse Arg zname, string                                                         
                                                                                
EndOfSysmods = 'YES'                                                            
                                                                                
/* Search for end of the __ZONE__ SYSMOD ENTRIES which are         */           
/* started with the following statement:                           */           
/*                                                                 */           
/*   LIST     SUMMARY REPORT FOR __ZONE__                          */           
/*                                                                 */           
/* Return YES if found.                                            */           
Parse Var string 'LIST     SUMMARY REPORT FOR' zone#                            
If STRIP(zone#) = zname Then                                                    
   Return EndOfSysmods                                                          
                                                                                
Return 'NO'                                                                     
/**********************************************************************/        
/* IsEndOfFeatures                                                    */        
/*                                                                    */        
/* Description : Checks if passed line contains end of FEATURE.       */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains end of FEATURE  */        
/*               entries, otherwise 'NO' is returned.                 */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  string            String value to analize.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains end of ENTRY.            */        
/*         'NO'       Passed string does not contain end of ENTRY.    */        
/*                                                                    */        
/**********************************************************************/        
IsEndOfFeatures: Procedure                                                      
Parse Arg string                                                                
                                                                                
string = STRIP(string)                                                          
                                                                                
/* Search for end of the GLOBAL FEATURE ENTRIES which are          */           
/* started with the following statement:                           */           
/*                                                                 */           
/*   GLOBAL   SYSMOD ENTRIES                                       */           
/*                                                                 */           
/* Return 'YES' if found.                                          */           
If string = 'GLOBAL   SYSMOD ENTRIES' Then                                      
   Return 'YES'                                                                 
                                                                                
Return 'NO'                                                                     
/**********************************************************************/        
/* IsEntryEnd                                                         */        
/*                                                                    */        
/* Description : Checks if passed line contains end of SYSMOD ENTRY.  */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains end of SYSMOD   */        
/*               ENTRY, otherwise 'NO' is returned.                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  string            String value to analize.                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains end of ENTRY.            */        
/*         'NO'       Passed string does not contain end of ENTRY.    */        
/*                                                                    */        
/**********************************************************************/        
IsEntryEnd: Procedure                                                           
Parse Arg string                                                                
                                                                                
/* Search for end of the SYSMOD ENTRIES which are                  */           
/* started with the following statement:                           */           
/*                                                                 */           
/*   [ something1 ] = something2                                   */           
/*                                                                 */           
/* Return 'YES' if end of SYSMOD ENTRY found.                      */           
If POS('=', string) > 0 Then                                                    
   Return 'YES'                                                                 
                                                                                
Return 'NO'                                                                     
/**********************************************************************/        
/* IsNewSysmod                                                        */        
/*                                                                    */        
/* Description : Checks if passed line contains new SYSMOD entry.     */        
/*                                                                    */        
/* Function    : Return 'YES' if passed line contains new SYSMOD      */        
/*               entry, otherwise 'NO' is returned.                   */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  string            String value to check.                          */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*        'YES'       Passed string contains new SYSMOD entry.        */        
/*         'NO'       Passed string is not new SYSMOD entry.          */        
/*                                                                    */        
/**********************************************************************/        
IsNewSysmod: Procedure Expose c2j.                                              
Parse Arg string                                                                
                                                                                
NewSysmod = 'YES'                                                               
                                                                                
/* We have a new SYSMOD found if TYPE field exist */                            
Parse Var string sysmod# 'TYPE            =' type#                              
If sysmod# \= '' & type# \= '' Then Do                                          
   Return NewSysmod                                                             
End                                                                             
                                                                                
/* We have a new SYSMOD found if CIFREQ field exist */                          
Parse Var string sysmod# 'CIFREQ          =' cifreq#                            
If sysmod# \= '' & cifreq# \= '' Then Do                                        
   Return NewSysmod                                                             
End                                                                             
                                                                                
/* We have a new SYSMOD found if FEATURE field exist */                         
Parse Var string name# 'FEATURE         =' feature#                             
If name# \= '' & feature# \= '' Then Do                                         
   Return NewSysmod                                                             
End                                                                             
                                                                                
/* We have a new SYSMOD found if HOLDERROR field exist */                       
Parse Var string name# 'HOLDERROR       =' holderror#                           
If name# \= '' & holderror# \= '' Then Do                                       
   Return NewSysmod                                                             
End                                                                             
                                                                                
/* We have a new SYSMOD found if HOLDFIXCAT field exist */                      
Parse Var string name# 'HOLDFIXCAT      =' holdfixcat#                          
If name# \= '' & holdfixcat# \= '' Then Do                                      
   Return NewSysmod                                                             
End                                                                             
                                                                                
/* We have a new SYSMOD found if HOLDFIXCAT field exist */                      
Parse Var string name# 'HOLDSYSTEM(INT) =' holdsystem#                          
If name# \= '' & holdsystem# \= '' Then Do                                      
   Return NewSysmod                                                             
End                                                                             
                                                                                
                                                                                
Return 'NO'                                                                     
/**********************************************************************/        
/* AddZone                                                            */        
/*                                                                    */        
/* Description : Add new TARGET/DLIB zone into the global zone list.  */        
/*                                                                    */        
/* Function    : Update c2j.zone.target. / c2j.zone.dlib. stem with   */        
/*               supplied CSI zone name.                              */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zone              CSI zone name to add                            */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
AddZone: Procedure Expose c2j.                                                  
Parse Arg name, type, vsam                                                      
                                                                                
/* Save TARGET zones name */                                                    
If type = 'TARGET' Then Do                                                      
   n = c2j.zone.target.0 + 1                                                    
   c2j.zone.target.0 = n                                                        
   c2j.zone.target.n = name                                                     
End                                                                             
                                                                                
/* Save DLIB zones name */                                                      
If type = 'DLIB' Then Do                                                        
   n = c2j.zone.dlib.0 + 1                                                      
   c2j.zone.dlib.0 = n                                                          
   c2j.zone.dlib.n = name                                                       
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* GetDLIB                                                            */        
/*                                                                    */        
/* Description : Retrieve DLIB zone properties and SYSMODs.           */        
/*                                                                    */        
/* Function    : Invoke SMP/E LIST DLIB SYSMODS command, parse the    */        
/*               output and fill c2j.zone. stem variables.            */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*  dlib              DLIB zone name                                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure, see log for details.                   */        
/*                                                                    */        
/**********************************************************************/        
GetDLIB: Procedure Expose c2j.                                                  
Parse Arg csi, dlib                                                             
                                                                                
Call SMPELIST csi, dlib, 'DLIBZONE SYSMODS'                                     
                                                                                
Do i = 1 To c2j.smplist.line.0                                                  
                                                                                
   /* Search for beginning of the DLIB zone entries which are         */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   _name_  ZONE ENTRIES                                          */        
   /*                                                                 */        
   /* Process all DLIB zone entries in a separate function.           */        
   Parse Var c2j.smplist.line.i dlib# other#                                    
   If STRIP(dlib#) = dlib & STRIP(other#) = 'ZONE ENTRIES' Then Do              
      i = GetDLIBInfo(dlib, i)                                                  
   End                                                                          
   /* Search for beginning of the SYSMODS entries which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   _name_   SYSMOD ENTRIES                                       */        
   /*                                                                 */        
   /* Process all PRODUCTs in a separate function.                    */        
   Parse Var c2j.smplist.line.i dlib# other#                                    
   If STRIP(dlib#) = dlib & STRIP(other#) = 'SYSMOD ENTRIES' Then Do            
      i = GetSYSMODs(dlib, i)                                                   
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* GetDLIBInfo                                                        */        
/*                                                                    */        
/* Description : Get DLIB zone properties.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DLIB zone properties and fill the following stem     */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.__dlib__.name      = 'ARM#01D'                                 */        
/* c2j.__dlib__.zone      = 'ARM#01D'                                 */        
/* c2j.__dlib__.upglevel  = 'SMP/E 36.58'                             */        
/* c2j.__dlib__.related   = 'ARM#01T'                                 */        
/* c2j.__dlib__.zdesc     = 'PRODUCT=ARM250, GENERIC=ARMHSM, ...'     */        
/* c2j.__dlib__.options   = 'BUILD'                                   */        
/* c2j.__dlib__.accjclin  = 'YES'                                     */        
/* c2j.__dlib__.srel      = 'Z038'                                    */        
/* c2j.__dlib__.type      = 'DLIBZONE'                                */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  dlib              DLIB zone name                                  */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DLIB    ZONE ENTRIES begins.                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetDLIBInfo: Procedure Expose c2j.                                              
Parse Arg dlib, idx                                                             
                                                                                
dlib = STRIP(dlib)                                                              
                                                                                
/* Set defaults for DLIB zone */                                                
c2j.dlib.type      = 'DLIBZONE'                                                 
c2j.dlib.name      = ''                                                         
c2j.dlib.zone      = ''                                                         
c2j.dlib.upglevel  = ''                                                         
c2j.dlib.related   = ''                                                         
c2j.dlib.zdesc     = ''                                                         
c2j.dlib.options   = ''                                                         
c2j.dlib.accjclin  = ''                                                         
c2j.dlib.srel      = ''                                                         
c2j.dlib.sysmods.0 = 0                                                          
                                                                                
/* Parse the __DLIB__ ZONE ENTRIES                                    */        
Do i = idx To c2j.smplist.line.0                                                
   /* Search for end of the __DLIB__ ZONE ENTRIES which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   __DLIB__ SYSMOD ENTRIES                                       */        
   /*                                                                 */        
   /* Return __DLIB__ ZONE ENTRIES index if found.                    */        
   Parse Var c2j.smplist.line.i dlib# other#                                    
   If STRIP(dlib#) = dlib & STRIP(other#) = 'SYSMOD ENTRIES' Then Do            
      Return i                                                                  
   End                                                                          
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(dlib, c2j.smplist.line.i) = 'YES' Then Iterate                
                                                                                
   /* Get DZONE field */                                                        
   Parse Var c2j.smplist.line.i name# 'DZONE           =' zone#                 
   If zone# \= '' Then Do                                                       
      c2j.dlib.name = STRIP(name#)                                              
      c2j.dlib.zone = STRIP(zone#)                                              
   End                                                                          
                                                                                
   /* Get UPGLEVEL field */                                                     
   Parse Var c2j.smplist.line.i 'UPGLEVEL        =' upglevel#                   
   If upglevel# \= '' Then Do                                                   
      c2j.dlib.upglevel = STRIP(upglevel#)                                      
   End                                                                          
                                                                                
   /* Get RELATED field */                                                      
   Parse Var c2j.smplist.line.i 'RELATED         =' related#                    
   If related# \= '' Then Do                                                    
      c2j.dlib.related = STRIP(related#)                                        
   End                                                                          
                                                                                
   /* Get ZDESC field */                                                        
   Parse Var c2j.smplist.line.i 'ZDESC           =' zdesc#                      
   If zdesc# \= '' Then Do                                                      
      c2j.dlib.zdesc = STRIP(zdesc#)                                            
      Do j = i + 1 To c2j.smplist.line.0                                        
         Parse Var c2j.smplist.line.j 'OPTIONS         =' options#              
         If options# \= '' Then Do                                              
            i = j                                                               
            Leave                                                               
         End                                                                    
         c2j.dlib.zdesc = c2j.dlib.zdesc || STRIP(c2j.smplist.line.j)           
      End                                                                       
   End                                                                          
                                                                                
   /* Get OPTIONS field */                                                      
   Parse Var c2j.smplist.line.i 'OPTIONS         =' options#                    
   If options# \= '' Then Do                                                    
      c2j.dlib.options = STRIP(options#)                                        
   End                                                                          
                                                                                
   /* Get ACCJCLIN field */                                                     
   Parse Var c2j.smplist.line.i 'ACCJCLIN        =' accjclin#                   
   If accjclin# \= '' Then Do                                                   
      c2j.dlib.accjclin = STRIP(accjclin#)                                      
   End                                                                          
                                                                                
   /* Get SREL field */                                                         
   Parse Var c2j.smplist.line.i 'SREL            =' srel#                       
   If srel# \= '' Then Do                                                       
      c2j.dlib.srel = STRIP(srel#)                                              
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetTLIB                                                            */        
/*                                                                    */        
/* Description : Retrieve TLIB zone properties and SYSMODs.           */        
/*                                                                    */        
/* Function    : Invoke SMP/E LIST TLIB SYSMODS command, parse the    */        
/*               output and fill c2j.zone. stem variables.            */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*  tlib              TLIB zone name                                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure, see log for details.                   */        
/*                                                                    */        
/**********************************************************************/        
GetTLIB: Procedure Expose c2j.                                                  
Parse Arg csi, tlib                                                             
                                                                                
Call SMPELIST csi, tlib, 'TARGETZONE SYSMODS'                                   
                                                                                
Do i = 1 To c2j.smplist.line.0                                                  
                                                                                
   /* Search for beginning of the TLIB zone entries which are         */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   _name_  ZONE ENTRIES                                          */        
   /*                                                                 */        
   /* Process all DLIB zone entries in a separate function.           */        
   Parse Var c2j.smplist.line.i tlib# other#                                    
   If STRIP(tlib#) = tlib & STRIP(other#) = 'ZONE ENTRIES' Then Do              
      i = GetTLIBInfo(tlib, i)                                                  
   End                                                                          
   /* Search for beginning of the SYSMODS entries which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   _name_   SYSMOD ENTRIES                                       */        
   /*                                                                 */        
   /* Process all PRODUCTs in a separate function.                    */        
   Parse Var c2j.smplist.line.i tlib# other#                                    
   If STRIP(tlib#) = tlib & STRIP(other#) = 'SYSMOD ENTRIES' Then Do            
      i = GetSYSMODs(tlib, i)                                                   
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* GetTLIBInfo                                                        */        
/*                                                                    */        
/* Description : Get TLIB zone properties.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               TLIB zone properties and fill the following stem     */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.__tlib__.name      = 'ARM#01T'                                 */        
/* c2j.__tlib__.zone      = 'ARM#01T'                                 */        
/* c2j.__tlib__.upglevel  = 'SMP/E 36.58'                             */        
/* c2j.__tlib__.related   = 'ARM#01T'                                 */        
/* c2j.__tlib__.zdesc     = 'PRODUCT=ARM250, GENERIC=ARMHSM, ...'     */        
/* c2j.__tlib__.options   = 'BUILD'                                   */        
/* c2j.__tlib__.accjclin  = ''                                        */        
/* c2j.__tlib__.srel      = 'Z038'                                    */        
/* c2j.__tlib__.type      = 'TARGETZONE'                              */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  tlib              TLIB zone name                                  */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    TLIB    ZONE ENTRIES begins.                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetTLIBInfo: Procedure Expose c2j.                                              
Parse Arg tlib, idx                                                             
                                                                                
tlib = STRIP(tlib)                                                              
                                                                                
/* Set defaults for TARGET ZONE */                                              
c2j.tlib.type      = 'TARGETZONE'                                               
c2j.tlib.name      = ''                                                         
c2j.tlib.zone      = ''                                                         
c2j.tlib.upglevel  = ''                                                         
c2j.tlib.related   = ''                                                         
c2j.tlib.zdesc     = ''                                                         
c2j.tlib.options   = ''                                                         
c2j.tlib.accjclin  = ''                                                         
c2j.tlib.srel      = ''                                                         
c2j.tlib.sysmods.0 = 0                                                          
                                                                                
/* Parse the __TLIB__ ZONE ENTRIES                                    */        
Do i = idx To c2j.smplist.line.0                                                
   /* Search for end of the __TLIB__ ZONE ENTRIES which are           */        
   /* started with the following statement:                           */        
   /*                                                                 */        
   /*   __TLIB__ SYSMOD ENTRIES                                       */        
   /*                                                                 */        
   /* Return __TLIB__ ZONE ENTRIES index if found.                    */        
   Parse Var c2j.smplist.line.i tlib# other#                                    
   If STRIP(tlib#) = tlib & STRIP(other#) = 'SYSMOD ENTRIES' Then Do            
      Return i                                                                  
   End                                                                          
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(tlib, c2j.smplist.line.i) = 'YES' Then Iterate                
                                                                                
   /* Get TZONE field */                                                        
   Parse Var c2j.smplist.line.i name# 'TZONE           =' zone#                 
   If zone# \= '' Then Do                                                       
      c2j.tlib.name = STRIP(name#)                                              
      c2j.tlib.zone = STRIP(zone#)                                              
   End                                                                          
                                                                                
   /* Get UPGLEVEL field */                                                     
   Parse Var c2j.smplist.line.i 'UPGLEVEL        =' upglevel#                   
   If upglevel# \= '' Then Do                                                   
      c2j.tlib.upglevel = STRIP(upglevel#)                                      
   End                                                                          
                                                                                
   /* Get RELATED field */                                                      
   Parse Var c2j.smplist.line.i 'RELATED         =' related#                    
   If related# \= '' Then Do                                                    
      c2j.tlib.related = STRIP(related#)                                        
   End                                                                          
                                                                                
   /* Get ZDESC field */                                                        
   Parse Var c2j.smplist.line.i 'ZDESC           =' zdesc#                      
   If zdesc# \= '' Then Do                                                      
      c2j.tlib.zdesc = STRIP(zdesc#)                                            
      Do j = i + 1 To c2j.smplist.line.0                                        
         Parse Var c2j.smplist.line.j 'OPTIONS         =' options#              
         If options# \= '' Then Do                                              
            i = j                                                               
            Leave                                                               
         End                                                                    
         c2j.tlib.zdesc = c2j.tlib.zdesc || STRIP(c2j.smplist.line.j)           
      End                                                                       
   End                                                                          
                                                                                
   /* Get OPTIONS field */                                                      
   Parse Var c2j.smplist.line.i 'OPTIONS         =' options#                    
   If options# \= '' Then Do                                                    
      c2j.tlib.options = STRIP(options#)                                        
   End                                                                          
                                                                                
   /* Get SREL field */                                                         
   Parse Var c2j.smplist.line.i 'SREL            =' srel#                       
   If srel# \= '' Then Do                                                       
      c2j.tlib.srel = STRIP(srel#)                                              
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSYSMODs                                                         */        
/*                                                                    */        
/* Description : Get TARGET/DLIB zone SYSMOD entries.                 */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SYSMOD entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.__dlib__.name      = 'ARM#01D'                                 */        
/* c2j.__dlib__.zone      = 'ARM#01D'                                 */        
/* c2j.__dlib__.upglevel  = 'SMP/E 36.58'                             */        
/* c2j.__dlib__.related   = 'ARM#01T'                                 */        
/* c2j.__dlib__.zdesc     = 'PRODUCT=ARM250, GENERIC=ARMHSM, ...'     */        
/* c2j.__dlib__.options   = 'BUILD'                                   */        
/* c2j.__dlib__.accjclin  = 'YES'                                     */        
/* c2j.__dlib__.srel      = 'Z038'                                    */        
/* c2j.__dlib__.type      = 'DLIBZONE'                                */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SYSMOD ENTRIES begins.                          */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSYSMODs: Procedure Expose c2j.                                               
Parse Arg zname, idx                                                            
                                                                                
zname = STRIP(zname)                                                            
                                                                                
/* Parse the __ZONE__ SYSMOD ENTRIES                                  */        
Do i = idx To c2j.smplist.line.0                                                
                                                                                
   /* Get out of here is found END-OF-SYSMODs line */                           
   If IsEndOfSysmods(zname, c2j.smplist.line.i) = 'YES' Then Do                 
      Return i                                                                  
   End                                                                          
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Get TYPE field */                                                         
   Parse Var c2j.smplist.line.i sysmod# 'TYPE            =' type#               
   Select                                                                       
      When type# = 'SUPERSEDED' Then                                            
         i = GetSysmod(zname, sysmod#, type#, i)                                
      When type# = 'FUNCTION' Then                                              
         i = GetSysmod(zname, sysmod#, type#, i)                                
      When type# = 'PTF' Then                                                   
         i = GetSysmod(zname, sysmod#, type#, i)                                
      When type# = 'APAR' Then                                                  
         i = GetSysmod(zname, sysmod#, type#, i)                                
      When type# = 'USERMOD' Then                                               
         i = GetSysmod(zname, sysmod#, type#, i)                                
      Otherwise                                                                 
         Nop                                                                    
   End                                                                          
                                                                                
   /* Get CIFREQ sysmod */                                                      
   Parse Var c2j.smplist.line.i sysmod# 'CIFREQ          =' cifreq#             
   If sysmod# \= '' & cifreq# \= '' Then Do                                     
      i = GetSysmod(zname, sysmod#, 'CIFREQ', i, cifreq#)                       
   End                                                                          
                                                                                
   /* Get HOLDSYSTEM(INT) sysmod */                                             
   Parse Var c2j.smplist.line.i sysmod# 'HOLDSYSTEM(INT) =' holdsystem#         
   If sysmod# \= '' & holdsystem# \= '' Then Do                                 
      i = GetSysmod(zname, sysmod#, 'HOLDSYSTEM', i, holdsystem#)               
   End                                                                          
                                                                                
   /* Get HOLDERROR sysmod */                                                   
   Parse Var c2j.smplist.line.i sysmod# 'HOLDERROR       =' holderror#          
   If sysmod# \= '' & holderror# \= '' Then Do                                  
      i = GetSysmod(zname, sysmod#, 'HOLDERROR', i, holderror#)                 
   End                                                                          
                                                                                
   /* Get HOLDFIXCAT sysmod */                                                  
   Parse Var c2j.smplist.line.i sysmod# 'HOLDFIXCAT      =' holdfixcat#         
   If sysmod# \= '' & holdfixcat# \= '' Then Do                                 
      i = GetSysmod(zname, sysmod#, 'HOLDFIXCAT', i, holdfixcat#)               
   End                                                                          
                                                                                
End                                                                             
                                                                                
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmod                                                          */        
/*                                                                    */        
/* Description : Get SYSMOD entries.                                  */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SYSMOD entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.mysmods.0 = n + 1                                        */        
/* c2j.zname.sysmods.n = 'AA38937'                                    */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.type     = 'SUPERSEDED'                    */        
/* c2j.zname.sysmods.sname.name     = 'AA38937'                       */        
/* c2j.zname.sysmods.sname.accept   = 'NO'                            */        
/* c2j.zname.sysmods.sname.bypass   = 'NO'                            */        
/* c2j.zname.sysmods.sname.dellmod  = 'NO'                            */        
/* c2j.zname.sysmods.sname.elemmov  = 'NO'                            */        
/* c2j.zname.sysmods.sname.error    = 'NO'                            */        
/* c2j.zname.sysmods.sname.jclin    = 'NO'                            */        
/* c2j.zname.sysmods.sname.lastsup  = 'UA80256'                       */        
/* c2j.zname.sysmods.sname.regen    = 'NO'                            */        
/* c2j.zname.sysmods.sname.renlmod  = 'NO'                            */        
/* c2j.zname.sysmods.sname.restore  = 'NO'                            */        
/* c2j.zname.sysmods.sname.smodtype = 'UNKNOWN'                       */        
/* c2j.zname.sysmods.sname.supby.0  = 3                               */        
/* c2j.zname.sysmods.sname.supby.1  = 'HKCI310'                       */        
/* c2j.zname.sysmods.sname.supby.2  = 'UA73689'                       */        
/* c2j.zname.sysmods.sname.supby.3  = 'UA76016'                       */        
/* c2j.zname.sysmods.sname.cifreq.0 = 3                               */        
/* c2j.zname.sysmods.sname.cifreq.1 = 'HKDS630,UA67172'               */        
/* c2j.zname.sysmods.sname.cifreq.2 = 'HKRJ330,UA67172'               */        
/* c2j.zname.sysmods.sname.cifreq.3 = 'UA69055,UA67787'               */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SYSMOD ENTRIES begins.                          */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmod: Procedure Expose c2j.                                                
Parse Arg zname, sname, stype, idx, other                                       
                                                                                
zname = STRIP(zname)                                                            
sname = STRIP(sname)                                                            
stype = STRIP(stype)                                                            
                                                                                
/* Set defaults for TARGET/DLIB zone */                                         
n = c2j.zname.sysmods.0 + 1                                                     
c2j.zname.sysmods.0 = n                                                         
c2j.zname.sysmods.n = sname                                                     
                                                                                
c2j.zname.sysmods.sname.type         = stype                                    
c2j.zname.sysmods.sname.name         = sname                                    
c2j.zname.sysmods.sname.applyzone    = ''                                       
c2j.zname.sysmods.sname.clist.0      = 0                                        
c2j.zname.sysmods.sname.cifreq.0     = 0                                        
c2j.zname.sysmods.sname.ifreq.0      = 0                                        
c2j.zname.sysmods.sname.delby        = ''                                       
c2j.zname.sysmods.sname.dlmod.0      = 0                                        
c2j.zname.sysmods.sname.data.0       = 0                                        
c2j.zname.sysmods.sname.data1.0      = 0                                        
c2j.zname.sysmods.sname.data2.0      = 0                                        
c2j.zname.sysmods.sname.data3.0      = 0                                        
c2j.zname.sysmods.sname.data4.0      = 0                                        
c2j.zname.sysmods.sname.data5.0      = 0                                        
c2j.zname.sysmods.sname.help.0       = 0                                        
c2j.zname.sysmods.sname.helpenu.0    = 0                                        
c2j.zname.sysmods.sname.ver.delete.0 = 0                                        
c2j.zname.sysmods.sname.ver.suping.0 = 0                                        
c2j.zname.sysmods.sname.ver.req.0    = 0                                        
c2j.zname.sysmods.sname.ver.vers.0   = 0                                        
c2j.zname.sysmods.sname.ver.srel.0   = 0                                        
c2j.zname.sysmods.sname.ver.fmid.0   = 0                                        
c2j.zname.sysmods.sname.ver.pre.0    = 0                                        
c2j.zname.sysmods.sname.ver.npre.0   = 0                                        
c2j.zname.sysmods.sname.description  = ''                                       
c2j.zname.sysmods.sname.feature.0    = 0                                        
c2j.zname.sysmods.sname.fesn         = ''                                       
c2j.zname.sysmods.sname.fmid         = ''                                       
c2j.zname.sysmods.sname.installdate  = ''                                       
c2j.zname.sysmods.sname.installtime  = ''                                       
c2j.zname.sysmods.sname.lastsup      = ''                                       
c2j.zname.sysmods.sname.mac.0        = 0                                        
c2j.zname.sysmods.sname.mod.0        = 0                                        
c2j.zname.sysmods.sname.parm.0       = 0                                        
c2j.zname.sysmods.sname.pnl.0        = 0                                        
c2j.zname.sysmods.sname.pnlenu.0     = 0                                        
c2j.zname.sysmods.sname.recdate      = ''                                       
c2j.zname.sysmods.sname.rectime      = ''                                       
c2j.zname.sysmods.sname.rework       = ''                                       
c2j.zname.sysmods.sname.samp.0       = 0                                        
c2j.zname.sysmods.sname.src.0        = 0                                        
c2j.zname.sysmods.sname.supby.0      = 0                                        
c2j.zname.sysmods.sname.sourceid.0   = 0                                        
c2j.zname.sysmods.sname.shellscr.0   = 0                                        
c2j.zname.sysmods.sname.program.0    = 0                                        
c2j.zname.sysmods.sname.hfs.0        = 0                                        
c2j.zname.sysmods.sname.skl.0        = 0                                        
c2j.zname.sysmods.sname.sklenu.0     = 0                                        
c2j.zname.sysmods.sname.tbl.0        = 0                                        
c2j.zname.sysmods.sname.tblenu.0     = 0                                        
c2j.zname.sysmods.sname.msg.0        = 0                                        
c2j.zname.sysmods.sname.msgenu.0     = 0                                        
c2j.zname.sysmods.sname.macupd.0     = 0                                        
c2j.zname.sysmods.sname.tlibprefix   = ''                                       
c2j.zname.sysmods.sname.holdfixcat.0 = 0                                        
c2j.zname.sysmods.sname.holderror.0  = 0                                        
c2j.zname.sysmods.sname.holdsystem.0 = 0                                        
c2j.zname.sysmods.sname.exec.0       = 0                                        
c2j.zname.sysmods.sname.user2.0      = 0                                        
                                                                                
c2j.zname.sysmods.sname.accept       = 'NO'                                     
c2j.zname.sysmods.sname.apply        = 'NO'                                     
c2j.zname.sysmods.sname.bypass       = 'NO'                                     
c2j.zname.sysmods.sname.dellmod      = 'NO'                                     
c2j.zname.sysmods.sname.elemmov      = 'NO'                                     
c2j.zname.sysmods.sname.error        = 'NO'                                     
c2j.zname.sysmods.sname.jclin        = 'NO'                                     
c2j.zname.sysmods.sname.regen        = 'NO'                                     
c2j.zname.sysmods.sname.receive      = 'NO'                                     
c2j.zname.sysmods.sname.renlmod      = 'NO'                                     
c2j.zname.sysmods.sname.restore      = 'NO'                                     
                                                                                
Select                                                                          
  When stype = 'FUNCTION' Then                                                  
    c2j.zname.sysmods.sname.smodtype     = 'FUNCTION'                           
  When stype = 'PTF' Then                                                       
    c2j.zname.sysmods.sname.smodtype     = 'PTF'                                
  When stype = 'APAR' Then                                                      
    c2j.zname.sysmods.sname.smodtype     = 'APAR'                               
  When stype = 'USERMOD' Then                                                   
    c2j.zname.sysmods.sname.smodtype     = 'USERMOD'                            
  When stype = 'CIFREQ' Then Do                                                 
    c2j.zname.sysmods.sname.smodtype     = ''                                   
                                                                                
    /* Get CIFREQ field */                                                      
    Parse Var other sysmod# 'CAUSED BY' causedby#                               
    If sysmod# \= '' & causedby# \= '' Then Do                                  
       idx = GetSysmodCIFREQ(zname, sname, idx, sysmod#, causedby#)             
    End                                                                         
  End                                                                           
  When stype = 'HOLDSYSTEM' Then Do                                             
    c2j.zname.sysmods.sname.smodtype     = ''                                   
                                                                                
    /* Get HOLDSYSTEM field */                                                  
    idx = GetSysmodHOLDSYSTEM(zname, sname, idx, other)                         
  End                                                                           
  When stype = 'HOLDERROR' Then Do                                              
    c2j.zname.sysmods.sname.smodtype     = ''                                   
                                                                                
    /* Get HOLDERROR field */                                                   
    idx = GetSysmodHOLDERROR(zname, sname, idx, other)                          
  End                                                                           
  When stype = 'HOLDFIXCAT' Then Do                                             
    c2j.zname.sysmods.sname.smodtype     = ''                                   
                                                                                
    /* Get HOLDSYSTEM field */                                                  
    idx = GetSysmodHOLDFIXCAT(zname, sname, idx, other)                         
  End                                                                           
  Otherwise                                                                     
    c2j.zname.sysmods.sname.smodtype     = 'UNKNOWN'                            
End                                                                             
                                                                                
                                                                                
/* Parse the __ZONE__ SYSMOD ENTRIES                                  */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Get out of here if found END-OF-SYSMODs line */                           
   If IsEndOfSysmods(zname, c2j.smplist.line.i) = 'YES' Then Do                 
      Return i                                                                  
   End                                                                          
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Let previous function deal with a new SYSMOD */                           
   If IsNewSysmod(c2j.smplist.line.i) = 'YES' Then Do                           
      /* Return previous line# to make it readable in GetSYSMODs      */        
      Return i - 1                                                              
   End                                                                          
                                                                                
   /* Get DESCRIPTION field */                                                  
   Parse Var c2j.smplist.line.i 'DESCRIPTION     =' description#                
   If description# \= '' Then Do                                                
      c2j.zname.sysmods.sname.description = STRIP(description#)                 
   End                                                                          
                                                                                
   /* Get APPLY ZONE field */                                                   
   Parse Var c2j.smplist.line.i 'APPLY ZONE      =' applyzone#                  
   If applyzone# \= '' Then Do                                                  
      c2j.zname.sysmods.sname.applyzone = STRIP(applyzone#)                     
   End                                                                          
                                                                                
   /* Get FEATURE field */                                                      
   Parse Var c2j.smplist.line.i 'FEATURE         =' feature#                    
   If feature# \= '' Then Do                                                    
      i = GetFeatureDATA(zname, sname, i, feature#)                             
   End                                                                          
                                                                                
   /* Get STATUS field */                                                       
   Parse Var c2j.smplist.line.i 'STATUS          =' status#                     
   If status# \= '' Then Do                                                     
      Do While status# \= ''                                                    
         Parse Var status# item# status#                                        
         item# = STRIP(item#)                                                   
         Select                                                                 
           When item# = 'ACC' Then                                              
             c2j.zname.sysmods.sname.accept  = 'YES'                            
           When item# = 'APP' Then                                              
             c2j.zname.sysmods.sname.apply   = 'YES'                            
           When item# = 'RGN' Then                                              
             c2j.zname.sysmods.sname.regen   = 'YES'                            
           When item# = 'BYP' Then                                              
             c2j.zname.sysmods.sname.bypass  = 'YES'                            
           When item# = 'REC' Then                                              
             c2j.zname.sysmods.sname.receive = 'YES'                            
           When item# = 'ERR' Then                                              
             c2j.zname.sysmods.sname.error   = 'YES'                            
           Otherwise                                                            
             Nop                                                                
         End                                                                    
      End                                                                       
   End                                                                          
                                                                                
   /* Get FESN field */                                                         
   Parse Var c2j.smplist.line.i 'FESN            =' fesn#                       
   If fesn# \= '' Then Do                                                       
      c2j.zname.sysmods.sname.fesn = STRIP(fesn#)                               
   End                                                                          
                                                                                
   /* Get FMID field */                                                         
   Parse Var c2j.smplist.line.i 'FMID            =' fmid#                       
   If fmid# \= '' Then Do                                                       
      c2j.zname.sysmods.sname.fmid = STRIP(fmid#)                               
   End                                                                          
                                                                                
   /* Get REWORK field */                                                       
   Parse Var c2j.smplist.line.i 'REWORK          =' rework#                     
   If rework# \= '' Then Do                                                     
      c2j.zname.sysmods.sname.rework = STRIP(rework#)                           
   End                                                                          
                                                                                
   /* Get DELBY field */                                                        
   Parse Var c2j.smplist.line.i 'DELBY           =' delby#                      
   If delby# \= '' Then Do                                                      
      c2j.zname.sysmods.sname.delby = STRIP(delby#)                             
   End                                                                          
                                                                                
   /* Get DELLMOD field */                                                      
   Parse Var c2j.smplist.line.i 'DELLMOD         =' dellmod#                    
   If dellmod# \= '' Then Do                                                    
      c2j.zname.sysmods.sname.dellmod = STRIP(dellmod#)                         
   End                                                                          
                                                                                
   /* Get JCLIN field */                                                        
   Parse Var c2j.smplist.line.i 'JCLIN           =' jclin#                      
   If jclin# \= '' Then Do                                                      
      c2j.zname.sysmods.sname.jclin = STRIP(jclin#)                             
   End                                                                          
                                                                                
   /* Get TLIBPREFIX field */                                                   
   Parse Var c2j.smplist.line.i 'TLIBPREFIX      =' tlibprefix#                 
   If tlibprefix# \= '' Then Do                                                 
      c2j.zname.sysmods.sname.tlibprefix = STRIP(tlibprefix#)                   
   End                                                                          
                                                                                
   /* Get DATE/TIME REC field */                                                
   Parse Var c2j.smplist.line.i 'DATE/TIME REC   =' dtrec#                      
   If dtrec# \= '' Then Do                                                      
      Parse Var dtrec# yy# '.' ddd# time#                                       
      c2j.zname.sysmods.sname.recdate = STRIP(yy#) || STRIP(ddd#)               
      c2j.zname.sysmods.sname.rectime = STRIP(time#)                            
   End                                                                          
                                                                                
   /* Get INS field */                                                          
   Parse Var c2j.smplist.line.i 'INS   =' dtins#                                
   If dtins# \= '' Then Do                                                      
      Parse Var dtins# yy# '.' ddd# time#                                       
      c2j.zname.sysmods.sname.installdate = STRIP(yy#) || STRIP(ddd#)           
      c2j.zname.sysmods.sname.installtime = STRIP(time#)                        
   End                                                                          
                                                                                
   /* Get CLIST field */                                                        
   Parse Var c2j.smplist.line.i 'CLIST           =' clist#                      
   If clist# \= '' Then Do                                                      
      i = GetSysmodCLIST(zname, sname, i, clist#)                               
   End                                                                          
                                                                                
   /* Get DATA field */                                                         
   Parse Var c2j.smplist.line.i 'DATA            =' data#                       
   If data# \= '' Then Do                                                       
      i = GetSysmodDATA(zname, sname, i, data#)                                 
   End                                                                          
                                                                                
   /* Get DATA1 field */                                                        
   Parse Var c2j.smplist.line.i 'DATA1           =' data1#                      
   If data1# \= '' Then Do                                                      
      i = GetSysmodDATA1(zname, sname, i, data1#)                               
   End                                                                          
                                                                                
   /* Get DATA2 field */                                                        
   Parse Var c2j.smplist.line.i 'DATA2           =' data2#                      
   If data2# \= '' Then Do                                                      
      i = GetSysmodDATA2(zname, sname, i, data2#)                               
   End                                                                          
                                                                                
   /* Get DATA3 field */                                                        
   Parse Var c2j.smplist.line.i 'DATA3           =' data3#                      
   If data3# \= '' Then Do                                                      
      i = GetSysmodDATA3(zname, sname, i, data3#)                               
   End                                                                          
                                                                                
   /* Get DATA4 field */                                                        
   Parse Var c2j.smplist.line.i 'DATA4           =' data4#                      
   If data4# \= '' Then Do                                                      
      i = GetSysmodDATA4(zname, sname, i, data4#)                               
   End                                                                          
                                                                                
   /* Get DATA5 field */                                                        
   Parse Var c2j.smplist.line.i 'DATA5           =' data5#                      
   If data5# \= '' Then Do                                                      
      i = GetSysmodDATA5(zname, sname, i, data5#)                               
   End                                                                          
                                                                                
   /* Get USER2 field */                                                        
   Parse Var c2j.smplist.line.i 'USER2           =' user2#                      
   If user2# \= '' Then Do                                                      
      i = GetSysmodUSER2(zname, sname, i, user2#)                               
   End                                                                          
                                                                                
   /* Get DLMOD field */                                                        
   Parse Var c2j.smplist.line.i 'DLMOD           =' dlmod#                      
   If dlmod# \= '' Then Do                                                      
      i = GetSysmodDLMOD(zname, sname, i, dlmod#)                               
   End                                                                          
                                                                                
   /* Get MAC field */                                                          
   Parse Var c2j.smplist.line.i 'MAC             =' mac#                        
   If mac# \= '' Then Do                                                        
      i = GetSysmodMAC(zname, sname, i, mac#)                                   
   End                                                                          
                                                                                
   /* Get MOD field */                                                          
   Parse Var c2j.smplist.line.i 'MOD             =' mod#                        
   If mod# \= '' Then Do                                                        
      i = GetSysmodMOD(zname, sname, i, mod#)                                   
   End                                                                          
                                                                                
   /* Get HFS field */                                                          
   Parse Var c2j.smplist.line.i 'HFS             =' hfs#                        
   If hfs# \= '' Then Do                                                        
      i = GetSysmodHFS(zname, sname, i, hfs#)                                   
   End                                                                          
                                                                                
   /* Get SRC field */                                                          
   Parse Var c2j.smplist.line.i 'SRC             =' src#                        
   If src# \= '' Then Do                                                        
      i = GetSysmodSRC(zname, sname, i, src#)                                   
   End                                                                          
                                                                                
   /* Get PARM field */                                                         
   Parse Var c2j.smplist.line.i 'PARM            =' parm#                       
   If parm# \= '' Then Do                                                       
      i = GetSysmodPARM(zname, sname, i, parm#)                                 
   End                                                                          
                                                                                
   /* Get EXEC field */                                                         
   Parse Var c2j.smplist.line.i 'EXEC            =' exec#                       
   If exec# \= '' Then Do                                                       
      i = GetSysmodEXEC(zname, sname, i, exec#)                                 
   End                                                                          
                                                                                
   /* Get HELP field */                                                         
   Parse Var c2j.smplist.line.i 'HELP            =' help#                       
   If help# \= '' Then Do                                                       
      i = GetSysmodHELP(zname, sname, i, help#)                                 
   End                                                                          
                                                                                
   /* Get HELPENU field */                                                      
   Parse Var c2j.smplist.line.i 'HELPENU         =' helpenu#                    
   If helpenu# \= '' Then Do                                                    
      i = GetSysmodHELPENU(zname, sname, i, helpenu#)                           
   End                                                                          
                                                                                
   /* Get PNL field */                                                          
   Parse Var c2j.smplist.line.i 'PNL             =' pnl#                        
   If pnl# \= '' Then Do                                                        
      i = GetSysmodPNL(zname, sname, i, pnl#)                                   
   End                                                                          
                                                                                
   /* Get PNLENU field */                                                       
   Parse Var c2j.smplist.line.i 'PNLENU          =' pnlenu#                     
   If pnlenu# \= '' Then Do                                                     
      i = GetSysmodPNLENU(zname, sname, i, pnlenu#)                             
   End                                                                          
                                                                                
   /* Get MSG field */                                                          
   Parse Var c2j.smplist.line.i 'MSG             =' msg#                        
   If msg# \= '' Then Do                                                        
      i = GetSysmodMSG(zname, sname, i, msg#)                                   
   End                                                                          
                                                                                
   /* Get MSGENU field */                                                       
   Parse Var c2j.smplist.line.i 'MSGENU          =' msgenu#                     
   If msgenu# \= '' Then Do                                                     
      i = GetSysmodMSGENU(zname, sname, i, msgenu#)                             
   End                                                                          
                                                                                
   /* Get SKL field */                                                          
   Parse Var c2j.smplist.line.i 'SKL             =' skl#                        
   If skl# \= '' Then Do                                                        
      i = GetSysmodSKL(zname, sname, i, skl#)                                   
   End                                                                          
                                                                                
   /* Get SKLENU field */                                                       
   Parse Var c2j.smplist.line.i 'SKLENU          =' sklenu#                     
   If sklenu# \= '' Then Do                                                     
      i = GetSysmodSKLENU(zname, sname, i, sklenu#)                             
   End                                                                          
                                                                                
   /* Get TBL field */                                                          
   Parse Var c2j.smplist.line.i 'TBL             =' tbl#                        
   If tbl# \= '' Then Do                                                        
      i = GetSysmodTBL(zname, sname, i, tbl#)                                   
   End                                                                          
                                                                                
   /* Get TBLENU field */                                                       
   Parse Var c2j.smplist.line.i 'TBLENU          =' tblenu#                     
   If tblenu# \= '' Then Do                                                     
      i = GetSysmodTBLENU(zname, sname, i, tblenu#)                             
   End                                                                          
                                                                                
   /* Get MACUPD field */                                                       
   Parse Var c2j.smplist.line.i 'MACUPD          =' macupd#                     
   If macupd# \= '' Then Do                                                     
      i = GetSysmodMACUPD(zname, sname, i, macupd#)                             
   End                                                                          
                                                                                
   /* Get SAMP field */                                                         
   Parse Var c2j.smplist.line.i 'SAMP            =' samp#                       
   If samp# \= '' Then Do                                                       
      i = GetSysmodSAMP(zname, sname, i, samp#)                                 
   End                                                                          
                                                                                
   /* Get PROGRAM field */                                                      
   Parse Var c2j.smplist.line.i 'PROGRAM         =' programs#                   
   If programs# \= '' Then Do                                                   
      i = GetSysmodPROGRAM(zname, sname, i, programs#)                          
   End                                                                          
                                                                                
   /* Get HOLDFIXCAT field */                                                   
   Parse Var c2j.smplist.line.i 'HOLDFIXCAT      =' holdfixcat#                 
   If holdfixcat# \= '' Then Do                                                 
      i = GetSysmodHOLDFIXCAT(zname, sname, i, holdfixcat#)                     
   End                                                                          
                                                                                
   /* Get SHELLSCR field */                                                     
   Parse Var c2j.smplist.line.i 'SHELLSCR        =' shellscr#                   
   If shellscr# \= '' Then Do                                                   
      i = GetSysmodSHELLSCR(zname, sname, i, shellscr#)                         
   End                                                                          
                                                                                
   /* Get HOLDERROR field */                                                    
   Parse Var c2j.smplist.line.i 'HOLDERROR       =' holderror#                  
   If holderror# \= '' Then Do                                                  
      i = GetSysmodHOLDERROR(zname, sname, i, holderror#)                       
   End                                                                          
                                                                                
   /* Get HOLDSYSTEM field */                                                   
   Parse Var c2j.smplist.line.i 'HOLDSYSTEM(INT) =' holdsystem#                 
   If holdsystem# \= '' Then Do                                                 
      i = GetSysmodHOLDSYSTEM(zname, sname, i, holdsystem#)                     
   End                                                                          
                                                                                
   /* Get DELETE VER(nnn) field */                                              
   Parse Var c2j.smplist.line.i 'DELETE VER(' ver# ') =' sysmods#               
   If sysmods# \= '' Then Do                                                    
      i = GetSysmodDELETEVER(zname, sname, i, ver#, sysmods#)                   
   End                                                                          
                                                                                
   /* Get SUPING VER(nnn) field */                                              
   Parse Var c2j.smplist.line.i 'SUPING VER(' ver# ') =' sysmods#               
   If sysmods# \= '' Then Do                                                    
      i = GetSysmodSUPINGVER(zname, sname, i, ver#, sysmods#)                   
   End                                                                          
                                                                                
   /* Get REQ VER(nnn) field */                                                 
   Parse Var c2j.smplist.line.i 'REQ    VER(' ver# ') =' sysmods#               
   If sysmods# \= '' Then Do                                                    
      i = GetSysmodREQVER(zname, sname, i, ver#, sysmods#)                      
   End                                                                          
                                                                                
   /* Get PRE VER(nnn) field */                                                 
   Parse Var c2j.smplist.line.i 'PRE    VER(' ver# ') =' sysmods#               
   If sysmods# \= '' Then Do                                                    
      i = GetSysmodPREVER(zname, sname, i, ver#, sysmods#)                      
   End                                                                          
                                                                                
   /* Get NPRE VER(nnn) field */                                                
   Parse Var c2j.smplist.line.i 'NPRE   VER(' ver# ') =' npre#                  
   If npre# \= '' Then Do                                                       
      i = GetSysmodNPREVER(zname, sname, i, ver#, npre#)                        
   End                                                                          
                                                                                
   /* Get VERS VER(nnn) field */                                                
   Parse Var c2j.smplist.line.i 'VERS   VER(' ver# ') =' sysmods#               
   If sysmods# \= '' Then Do                                                    
      i = GetSysmodVERSVER(zname, sname, i, ver#, sysmods#)                     
   End                                                                          
                                                                                
   /* Get SREL VER(nnn) field */                                                
   Parse Var c2j.smplist.line.i 'SREL   VER(' ver# ') =' srel#                  
   If srel# \= '' Then Do                                                       
      i = GetSysmodSRELVER(zname, sname, i, ver#, srel#)                        
   End                                                                          
                                                                                
   /* Get FMID VER(nnn) field */                                                
   Parse Var c2j.smplist.line.i 'FMID   VER(' ver# ') =' fmid#                  
   If fmid# \= '' Then Do                                                       
      i = GetSysmodFMIDVER(zname, sname, i, ver#, fmid#)                        
   End                                                                          
                                                                                
   /* Get LASTSUP field */                                                      
   Parse Var c2j.smplist.line.i 'LASTSUP         =' sysmod#                     
   If sysmod# \= '' Then Do                                                     
      c2j.zname.sysmods.sname.lastsup  = STRIP(sysmod#)                         
   End                                                                          
                                                                                
   /* Get SUPBY field */                                                        
   Parse Var c2j.smplist.line.i 'SUPBY(IN SYSMD) =' supby#                      
   If supby# \= '' Then Do                                                      
      i = GetSysmodSupBy(zname, sname, i, supby#)                               
   End                                                                          
                                                                                
   /* Get SOURCEID field */                                                     
   Parse Var c2j.smplist.line.i 'SOURCEID        =' sourceid#                   
   If sourceid# \= '' Then Do                                                   
      i = GetSysmodSourceId(zname, sname, i, sourceid#)                         
   End                                                                          
                                                                                
   /* Get CIFREQ field */                                                       
   Parse Var c2j.smplist.line.i 'CIFREQ          =' ,                           
                                 sysmod# 'CAUSED BY' causedby#                  
   If sysmod# \= '' & causedby# \= '' Then Do                                   
      i = GetSysmodCIFREQ(zname, sname, i, sysmod#, causedby#)                  
   End                                                                          
                                                                                
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDELETEVER                                                 */        
/*                                                                    */        
/* Description : Get SYSMOD DELETE VER entries.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DELETE VER entries and fill the following stem       */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.delete.0 = 1                           */        
/* c2j.zname.sysmods.sname.ver.delete.1 = '001'                       */        
/* c2j.zname.sysmods.sname.ver.delete.001.0 = 2                       */        
/* c2j.zname.sysmods.sname.ver.delete.001.1 = 'AKCI140'               */        
/* c2j.zname.sysmods.sname.ver.delete.001.1 = 'AKCI200'               */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DELETE VER ENTRIEs begins.                      */        
/*  initial           1st batch of DELETE VER values                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDELETEVER: Procedure Expose c2j.                                       
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.delete.0 + 1                                    
c2j.zname.sysmods.sname.ver.delete.0 = k                                        
c2j.zname.sysmods.sname.ver.delete.k = vern                                     
                                                                                
c2j.zname.sysmods.sname.ver.delete.vern.0 = 0                                   
                                                                                
/* Get 1st batch of DELETE VER values */                                        
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.ver.delete.vern.0 + 1                            
   c2j.zname.sysmods.sname.ver.delete.vern.0 = k                                
   c2j.zname.sysmods.sname.ver.delete.vern.k = STRIP(sysmod#)                   
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DELETE VER statement */                              
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DELETE VER values */                                    
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.ver.delete.vern.0 + 1                         
      c2j.zname.sysmods.sname.ver.delete.vern.0 = k                             
      c2j.zname.sysmods.sname.ver.delete.vern.k = STRIP(sysmod#)                
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSUPINGVER                                                 */        
/*                                                                    */        
/* Description : Get SYSMOD SUPING VER entries.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SUPING VER entries and fill the following stem       */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.suping.0 = 1                           */        
/* c2j.zname.sysmods.sname.ver.suping.1 = '001'                       */        
/* c2j.zname.sysmods.sname.ver.suping.001.0 = 2                       */        
/* c2j.zname.sysmods.sname.ver.suping.001.1 = 'AKCI140'               */        
/* c2j.zname.sysmods.sname.ver.suping.001.1 = 'AKCI200'               */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SUPING VER ENTRIEs begins.                      */        
/*  initial           1st batch of SUPING VER values                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSUPINGVER: Procedure Expose c2j.                                       
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.suping.0 + 1                                    
c2j.zname.sysmods.sname.ver.suping.0 = k                                        
c2j.zname.sysmods.sname.ver.suping.k = vern                                     
                                                                                
c2j.zname.sysmods.sname.ver.suping.vern.0 = 0                                   
                                                                                
/* Get 1st batch of SUPING VER values */                                        
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.ver.suping.vern.0 + 1                            
   c2j.zname.sysmods.sname.ver.suping.vern.0 = k                                
   c2j.zname.sysmods.sname.ver.suping.vern.k = STRIP(sysmod#)                   
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SUPING VER statement */                              
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SUPING VER values */                                    
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.ver.suping.vern.0 + 1                         
      c2j.zname.sysmods.sname.ver.suping.vern.0 = k                             
      c2j.zname.sysmods.sname.ver.suping.vern.k = STRIP(sysmod#)                
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodREQVER                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD REQ VER entries.                          */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               REQ VER entries and fill the following stem          */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.req.0 = 1                              */        
/* c2j.zname.sysmods.sname.ver.req.1 = '001'                          */        
/* c2j.zname.sysmods.sname.ver.req.001.0 = 2                          */        
/* c2j.zname.sysmods.sname.ver.req.001.1 = 'AKCI140'                  */        
/* c2j.zname.sysmods.sname.ver.req.001.2 = 'AKCI200'                  */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    REQ VER ENTRIEs begins.                         */        
/*  initial           1st batch of REQ VER values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodREQVER: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.req.0 + 1                                       
c2j.zname.sysmods.sname.ver.req.0 = k                                           
c2j.zname.sysmods.sname.ver.req.k = vern                                        
                                                                                
c2j.zname.sysmods.sname.ver.req.vern.0 = 0                                      
                                                                                
/* Get 1st batch of REQ VER values */                                           
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.ver.req.vern.0 + 1                               
   c2j.zname.sysmods.sname.ver.req.vern.0 = k                                   
   c2j.zname.sysmods.sname.ver.req.vern.k = STRIP(sysmod#)                      
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-REQ VER statement */                                 
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of REQ VER values */                                       
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.ver.req.vern.0 + 1                            
      c2j.zname.sysmods.sname.ver.req.vern.0 = k                                
      c2j.zname.sysmods.sname.ver.req.vern.k = STRIP(sysmod#)                   
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodPREVER                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD PRE VER entries.                          */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               PRE VER entries and fill the following stem          */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.pre.0 = 1                              */        
/* c2j.zname.sysmods.sname.ver.pre.1 = '001'                          */        
/* c2j.zname.sysmods.sname.ver.pre.001.0 = 3                          */        
/* c2j.zname.sysmods.sname.ver.pre.001.1 = 'UI75182'                  */        
/* c2j.zname.sysmods.sname.ver.pre.001.2 = 'UI76169'                  */        
/* c2j.zname.sysmods.sname.ver.pre.001.3 = 'UI78422'                  */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    PRE VER ENTRIEs begins.                         */        
/*  initial           1st batch of PRE VER values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodPREVER: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.pre.0 + 1                                       
c2j.zname.sysmods.sname.ver.pre.0 = k                                           
c2j.zname.sysmods.sname.ver.pre.k = vern                                        
                                                                                
c2j.zname.sysmods.sname.ver.pre.vern.0 = 0                                      
                                                                                
/* Get 1st batch of PRE VER values */                                           
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.ver.pre.vern.0 + 1                               
   c2j.zname.sysmods.sname.ver.pre.vern.0 = k                                   
   c2j.zname.sysmods.sname.ver.pre.vern.k = STRIP(sysmod#)                      
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-PRE VER statement */                                 
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of PRE VER values */                                       
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.ver.pre.vern.0 + 1                            
      c2j.zname.sysmods.sname.ver.pre.vern.0 = k                                
      c2j.zname.sysmods.sname.ver.pre.vern.k = STRIP(sysmod#)                   
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodNPREVER                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD NPRE VER entries.                         */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               NPRE VER entries and fill the following stem         */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.npre.0 = 1                             */        
/* c2j.zname.sysmods.sname.ver.npre.1 = '001'                         */        
/* c2j.zname.sysmods.sname.ver.npre.001.0 = 'H238KY0'                 */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    NPRE VER ENTRIEs begins.                        */        
/*  initial           1st batch of NPRE VER values                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodNPREVER: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.npre.0 + 1                                      
c2j.zname.sysmods.sname.ver.npre.0 = k                                          
c2j.zname.sysmods.sname.ver.npre.k = vern                                       
                                                                                
c2j.zname.sysmods.sname.ver.npre.vern.0 = 0                                     
                                                                                
/* Get 1st batch of NPRE VER values */                                          
Do While initial \= ''                                                          
   Parse Var initial npre# initial                                              
   k = c2j.zname.sysmods.sname.ver.npre.vern.0 + 1                              
   c2j.zname.sysmods.sname.ver.npre.vern.0 = k                                  
   c2j.zname.sysmods.sname.ver.npre.vern.k = STRIP(npre#)                       
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-NPRE VER statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of NPRE VER values */                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial npre# initial                                           
      k = c2j.zname.sysmods.sname.ver.npre.vern.0 + 1                           
      c2j.zname.sysmods.sname.ver.npre.vern.0 = k                               
      c2j.zname.sysmods.sname.ver.npre.vern.k = STRIP(npre#)                    
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodVERSVER                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD VERS VER entries.                         */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               VERS VER entries and fill the following stem         */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.vers.0 = 1                             */        
/* c2j.zname.sysmods.sname.ver.vers.1 = '001'                         */        
/* c2j.zname.sysmods.sname.ver.vers.001.0 = 2                         */        
/* c2j.zname.sysmods.sname.ver.vers.001.1 = 'AKCI140'                 */        
/* c2j.zname.sysmods.sname.ver.vers.001.1 = 'AKCI200'                 */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    VERS VER ENTRIEs begins.                        */        
/*  initial           1st batch of VERS VER values                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodVERSVER: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.vers.0 + 1                                      
c2j.zname.sysmods.sname.ver.vers.0 = k                                          
c2j.zname.sysmods.sname.ver.vers.k = vern                                       
                                                                                
c2j.zname.sysmods.sname.ver.vers.vern.0 = 0                                     
                                                                                
/* Get 1st batch of VERS VER values */                                          
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.ver.vers.vern.0 + 1                              
   c2j.zname.sysmods.sname.ver.vers.vern.0 = k                                  
   c2j.zname.sysmods.sname.ver.vers.vern.k = STRIP(sysmod#)                     
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-VERS VER statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of VERS VER values */                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.ver.vers.vern.0 + 1                           
      c2j.zname.sysmods.sname.ver.vers.vern.0 = k                               
      c2j.zname.sysmods.sname.ver.vers.vern.k = STRIP(sysmod#)                  
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSRELVER                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD SREL VER entries.                         */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SREL VER entries and fill the following stem         */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.srel.0 = 1                             */        
/* c2j.zname.sysmods.sname.ver.srel.1 = '001'                         */        
/* c2j.zname.sysmods.sname.ver.srel.001.0 = 'Z038'                    */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SREL VER ENTRIEs begins.                        */        
/*  initial           1st batch of SREL VER values                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSRELVER: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.srel.0 + 1                                      
c2j.zname.sysmods.sname.ver.srel.0 = k                                          
c2j.zname.sysmods.sname.ver.srel.k = vern                                       
                                                                                
c2j.zname.sysmods.sname.ver.srel.vern.0 = 0                                     
                                                                                
/* Get 1st batch of SREL VER values */                                          
Do While initial \= ''                                                          
   Parse Var initial srel# initial                                              
   k = c2j.zname.sysmods.sname.ver.srel.vern.0 + 1                              
   c2j.zname.sysmods.sname.ver.srel.vern.0 = k                                  
   c2j.zname.sysmods.sname.ver.srel.vern.k = STRIP(srel#)                       
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SREL VER statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SREL VER values */                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial srel# initial                                           
      k = c2j.zname.sysmods.sname.ver.srel.vern.0 + 1                           
      c2j.zname.sysmods.sname.ver.srel.vern.0 = k                               
      c2j.zname.sysmods.sname.ver.srel.vern.k = STRIP(srel#)                    
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodFMIDVER                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD FMID VER entries.                         */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               FMID VER entries and fill the following stem         */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ver.fmid.0 = 1                             */        
/* c2j.zname.sysmods.sname.ver.fmid.1 = '001'                         */        
/* c2j.zname.sysmods.sname.ver.fmid.001.0 = 'HSMA244'                 */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    FMID VER ENTRIEs begins.                        */        
/*  initial           1st batch of FMID VER values                    */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodFMIDVER: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, vern, initial                                      
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
vern     = STRIP(vern)                                                          
initial  = STRIP(initial)                                                       
                                                                                
k = c2j.zname.sysmods.sname.ver.fmid.0 + 1                                      
c2j.zname.sysmods.sname.ver.fmid.0 = k                                          
c2j.zname.sysmods.sname.ver.fmid.k = vern                                       
                                                                                
c2j.zname.sysmods.sname.ver.fmid.vern.0 = 0                                     
                                                                                
/* Get 1st batch of FMID VER values */                                          
Do While initial \= ''                                                          
   Parse Var initial fmid# initial                                              
   k = c2j.zname.sysmods.sname.ver.fmid.vern.0 + 1                              
   c2j.zname.sysmods.sname.ver.fmid.vern.0 = k                                  
   c2j.zname.sysmods.sname.ver.fmid.vern.k = STRIP(fmid#)                       
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-FMID VER statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of FMID VER values */                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial fmid# initial                                           
      k = c2j.zname.sysmods.sname.ver.fmid.vern.0 + 1                           
      c2j.zname.sysmods.sname.ver.fmid.vern.0 = k                               
      c2j.zname.sysmods.sname.ver.fmid.vern.k = STRIP(fmid#)                    
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetFeatureDATA                                                     */        
/*                                                                    */        
/* Description : Get FEATURES for FMID.                               */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA  entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.feature.0 = 3                              */        
/* c2j.zname.sysmods.sname.feature.1 = 'IDBTKE2A'                     */        
/* c2j.zname.sysmods.sname.feature.2 = 'IFANKE10'                     */        
/* c2j.zname.sysmods.sname.feature.3 = 'IVFUKE10'                     */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA ENTRIEs begins.                            */        
/*  initial           1st batch of FEATURE values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetFeatureDATA: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of FEATURE values */                                           
Do While initial \= ''                                                          
   Parse Var initial feature# initial                                           
   k = c2j.zname.sysmods.sname.feature.0 + 1                                    
   c2j.zname.sysmods.sname.feature.0 = k                                        
   c2j.zname.sysmods.sname.feature.k = STRIP(feature#)                          
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next line of FEATURE values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial feature# initial                                        
      k = c2j.zname.sysmods.sname.feature.0 + 1                                 
      c2j.zname.sysmods.sname.feature.0 = k                                     
      c2j.zname.sysmods.sname.feature.k = STRIP(feature#)                       
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodCLIST                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD CLIST entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               CLIST entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.clist.0 = 3                                */        
/* c2j.zname.sysmods.sname.clist.1 = 'ARHSTART'                       */        
/* c2j.zname.sysmods.sname.clist.2 = 'ARHTR003'                       */        
/* c2j.zname.sysmods.sname.clist.3 = 'ARHTR004'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    CLIST ENTRIEs begins.                           */        
/*  initial           1st batch of CLIST values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodCLIST: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of CLIST values */                                             
Do While initial \= ''                                                          
   Parse Var initial clist# initial                                             
   k = c2j.zname.sysmods.sname.clist.0 + 1                                      
   c2j.zname.sysmods.sname.clist.0 = k                                          
   c2j.zname.sysmods.sname.clist.k = STRIP(clist#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-CLIST statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of CLIST values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial clist# initial                                          
      k = c2j.zname.sysmods.sname.clist.0 + 1                                   
      c2j.zname.sysmods.sname.clist.0 = k                                       
      c2j.zname.sysmods.sname.clist.k = STRIP(clist#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA                                                      */        
/*                                                                    */        
/* Description : Get SYSMOD DATA  entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA  entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data.0 = 3                                 */        
/* c2j.zname.sysmods.sname.data.1 = 'ARHA29'                          */        
/* c2j.zname.sysmods.sname.data.2 = 'ARHC01'                          */        
/* c2j.zname.sysmods.sname.data.3 = 'ARHDEF'                          */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA ENTRIEs begins.                            */        
/*  initial           1st batch of DATA values                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA: Procedure Expose c2j.                                            
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA values */                                              
Do While initial \= ''                                                          
   Parse Var initial data# initial                                              
   k = c2j.zname.sysmods.sname.data.0 + 1                                       
   c2j.zname.sysmods.sname.data.0 = k                                           
   c2j.zname.sysmods.sname.data.k = STRIP(data#)                                
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data# initial                                           
      k = c2j.zname.sysmods.sname.data.0 + 1                                    
      c2j.zname.sysmods.sname.data.0 = k                                        
      c2j.zname.sysmods.sname.data.k = STRIP(data#)                             
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA1                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DATA1 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA1 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data1.0 = 3                                */        
/* c2j.zname.sysmods.sname.data1.1 = 'KDSALIAS'                       */        
/* c2j.zname.sysmods.sname.data1.2 = 'KDSEADME'                       */        
/* c2j.zname.sysmods.sname.data1.3 = 'KDSNTROL'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA1 ENTRIEs begins.                           */        
/*  initial           1st batch of DATA1 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA1: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA1 values */                                             
Do While initial \= ''                                                          
   Parse Var initial data1# initial                                             
   k = c2j.zname.sysmods.sname.data1.0 + 1                                      
   c2j.zname.sysmods.sname.data1.0 = k                                          
   c2j.zname.sysmods.sname.data1.k = STRIP(data1#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA1 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA1 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data1# initial                                          
      k = c2j.zname.sysmods.sname.data1.0 + 1                                   
      c2j.zname.sysmods.sname.data1.0 = k                                       
      c2j.zname.sysmods.sname.data1.k = STRIP(data1#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA2                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DATA2 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA2 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data2.0 = 3                                */        
/* c2j.zname.sysmods.sname.data2.1 = 'KDSALIAS'                       */        
/* c2j.zname.sysmods.sname.data2.2 = 'KDSEADME'                       */        
/* c2j.zname.sysmods.sname.data2.3 = 'KDSNTROL'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA2 ENTRIEs begins.                           */        
/*  initial           1st batch of DATA2 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA2: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA2 values */                                             
Do While initial \= ''                                                          
   Parse Var initial data2# initial                                             
   k = c2j.zname.sysmods.sname.data2.0 + 1                                      
   c2j.zname.sysmods.sname.data2.0 = k                                          
   c2j.zname.sysmods.sname.data2.k = STRIP(data2#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA2 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA2 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data2# initial                                          
      k = c2j.zname.sysmods.sname.data2.0 + 1                                   
      c2j.zname.sysmods.sname.data2.0 = k                                       
      c2j.zname.sysmods.sname.data2.k = STRIP(data2#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA3                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DATA3 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA3 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data3.0 = 3                                */        
/* c2j.zname.sysmods.sname.data3.1 = 'KDSALIAS'                       */        
/* c2j.zname.sysmods.sname.data3.2 = 'KDSEADME'                       */        
/* c2j.zname.sysmods.sname.data3.3 = 'KDSNTROL'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA3 ENTRIEs begins.                           */        
/*  initial           1st batch of DATA3 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA3: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA3 values */                                             
Do While initial \= ''                                                          
   Parse Var initial data3# initial                                             
   k = c2j.zname.sysmods.sname.data3.0 + 1                                      
   c2j.zname.sysmods.sname.data3.0 = k                                          
   c2j.zname.sysmods.sname.data3.k = STRIP(data3#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA3 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA3 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data3# initial                                          
      k = c2j.zname.sysmods.sname.data3.0 + 1                                   
      c2j.zname.sysmods.sname.data3.0 = k                                       
      c2j.zname.sysmods.sname.data3.k = STRIP(data3#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA4                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DATA4 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA4 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data4.0 = 3                                */        
/* c2j.zname.sysmods.sname.data4.1 = 'KDSALIAS'                       */        
/* c2j.zname.sysmods.sname.data4.2 = 'KDSEADME'                       */        
/* c2j.zname.sysmods.sname.data4.3 = 'KDSNTROL'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA4 ENTRIEs begins.                           */        
/*  initial           1st batch of DATA4 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA4: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA4 values */                                             
Do While initial \= ''                                                          
   Parse Var initial data4# initial                                             
   k = c2j.zname.sysmods.sname.data4.0 + 1                                      
   c2j.zname.sysmods.sname.data4.0 = k                                          
   c2j.zname.sysmods.sname.data4.k = STRIP(data4#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA4 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA4 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data4# initial                                          
      k = c2j.zname.sysmods.sname.data4.0 + 1                                   
      c2j.zname.sysmods.sname.data4.0 = k                                       
      c2j.zname.sysmods.sname.data4.k = STRIP(data4#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDATA5                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DATA5 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DATA5 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.data5.0 = 3                                */        
/* c2j.zname.sysmods.sname.data5.1 = 'ARHJ1SMA'                       */        
/* c2j.zname.sysmods.sname.data5.2 = 'ARHJ2SMI'                       */        
/* c2j.zname.sysmods.sname.data5.3 = 'ARHJ3ALO'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DATA5 ENTRIEs begins.                           */        
/*  initial           1st batch of DATA5 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDATA5: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DATA5 values */                                             
Do While initial \= ''                                                          
   Parse Var initial data5# initial                                             
   k = c2j.zname.sysmods.sname.data5.0 + 1                                      
   c2j.zname.sysmods.sname.data5.0 = k                                          
   c2j.zname.sysmods.sname.data5.k = STRIP(data5#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DATA5 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DATA5 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial data5# initial                                          
      k = c2j.zname.sysmods.sname.data5.0 + 1                                   
      c2j.zname.sysmods.sname.data5.0 = k                                       
      c2j.zname.sysmods.sname.data5.k = STRIP(data5#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodUSER2                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD USER2 entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               USER2 entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.user2.0 = 4                                */        
/* c2j.zname.sysmods.sname.user2.1 = 'IHSATMN1'                       */        
/* c2j.zname.sysmods.sname.user2.2 = 'IHSATMN2'                       */        
/* c2j.zname.sysmods.sname.user2.3 = 'IHSATMT1'                       */        
/* c2j.zname.sysmods.sname.user2.4 = 'IHSATMT2'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    USER2 ENTRIEs begins.                           */        
/*  initial           1st batch of USER2 values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodUSER2: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of USER2 values */                                             
Do While initial \= ''                                                          
   Parse Var initial user2# initial                                             
   k = c2j.zname.sysmods.sname.user2.0 + 1                                      
   c2j.zname.sysmods.sname.user2.0 = k                                          
   c2j.zname.sysmods.sname.user2.k = STRIP(user2#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-USER2 statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of USER2 values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial user2# initial                                          
      k = c2j.zname.sysmods.sname.user2.0 + 1                                   
      c2j.zname.sysmods.sname.user2.0 = k                                       
      c2j.zname.sysmods.sname.user2.k = STRIP(user2#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodDLMOD                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD DLMOD entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               DLMOD entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.dlmod.0 = 4                                */        
/* c2j.zname.sysmods.sname.dlmod.1 = 'IHSATMN1'                       */        
/* c2j.zname.sysmods.sname.dlmod.2 = 'IHSATMN2'                       */        
/* c2j.zname.sysmods.sname.dlmod.3 = 'IHSATMT1'                       */        
/* c2j.zname.sysmods.sname.dlmod.4 = 'IHSATMT2'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    DLMOD ENTRIEs begins.                           */        
/*  initial           1st batch of DLMOD values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodDLMOD: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of DLMOD values */                                             
Do While initial \= ''                                                          
   Parse Var initial dlmod# initial                                             
   k = c2j.zname.sysmods.sname.dlmod.0 + 1                                      
   c2j.zname.sysmods.sname.dlmod.0 = k                                          
   c2j.zname.sysmods.sname.dlmod.k = STRIP(dlmod#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-DLMOD statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of DLMOD values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial dlmod# initial                                          
      k = c2j.zname.sysmods.sname.dlmod.0 + 1                                   
      c2j.zname.sysmods.sname.dlmod.0 = k                                       
      c2j.zname.sysmods.sname.dlmod.k = STRIP(dlmod#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodMAC                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD MAC entries.                              */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               MAC entries and fill the following stem variables:   */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.mac.0 = 3                                  */        
/* c2j.zname.sysmods.sname.mac.1 = 'KGL$$MAC'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    MAC ENTRIEs begins.                             */        
/*  initial           1st batch of MAC values                         */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodMAC: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of MAC values */                                               
Do While initial \= ''                                                          
   Parse Var initial mac# initial                                               
   k = c2j.zname.sysmods.sname.mac.0 + 1                                        
   c2j.zname.sysmods.sname.mac.0 = k                                            
   c2j.zname.sysmods.sname.mac.k = STRIP(mac#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-MAC statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of MAC values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial mac# initial                                            
      k = c2j.zname.sysmods.sname.mac.0 + 1                                     
      c2j.zname.sysmods.sname.mac.0 = k                                         
      c2j.zname.sysmods.sname.mac.k = STRIP(mac#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHFS                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD HFS entries.                              */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HFS entries and fill the following stem variables:   */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.hfs.0 = 3                                  */        
/* c2j.zname.sysmods.sname.hfs.1 = 'AZFBCERT'                         */        
/* c2j.zname.sysmods.sname.hfs.2 = 'AZFBPTKT'                         */        
/* c2j.zname.sysmods.sname.hfs.3 = 'AZFBRADP'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HFS ENTRIEs begins.                             */        
/*  initial           1st batch of HFS values                         */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHFS: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HFS values */                                               
Do While initial \= ''                                                          
   Parse Var initial hfs# initial                                               
   k = c2j.zname.sysmods.sname.hfs.0 + 1                                        
   c2j.zname.sysmods.sname.hfs.0 = k                                            
   c2j.zname.sysmods.sname.hfs.k = STRIP(hfs#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HFS statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HFS values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial hfs# initial                                            
      k = c2j.zname.sysmods.sname.hfs.0 + 1                                     
      c2j.zname.sysmods.sname.hfs.0 = k                                         
      c2j.zname.sysmods.sname.hfs.k = STRIP(hfs#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSRC                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD SRC entries.                              */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SRC entries and fill the following stem variables:   */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.src.0 = 1                                  */        
/* c2j.zname.sysmods.sname.src.1 = 'BACRCX01'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SRC ENTRIEs begins.                             */        
/*  initial           1st batch of SRC values                         */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSRC: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of SRC values */                                               
Do While initial \= ''                                                          
   Parse Var initial src# initial                                               
   k = c2j.zname.sysmods.sname.src.0 + 1                                        
   c2j.zname.sysmods.sname.src.0 = k                                            
   c2j.zname.sysmods.sname.src.k = STRIP(src#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SRC statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SRC values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial src# initial                                            
      k = c2j.zname.sysmods.sname.src.0 + 1                                     
      c2j.zname.sysmods.sname.src.0 = k                                         
      c2j.zname.sysmods.sname.src.k = STRIP(src#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodMOD                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD MOD entries.                              */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               MOD entries and fill the following stem variables:   */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.mod.0 = 3                                  */        
/* c2j.zname.sysmods.sname.mod.1 = 'ARHAA001'                         */        
/* c2j.zname.sysmods.sname.mod.2 = 'ARHAA002'                         */        
/* c2j.zname.sysmods.sname.mod.3 = 'ARHAA003'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    MOD ENTRIEs begins.                             */        
/*  initial           1st batch of MOD values                         */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodMOD: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of MOD values */                                               
Do While initial \= ''                                                          
   Parse Var initial mod# initial                                               
   k = c2j.zname.sysmods.sname.mod.0 + 1                                        
   c2j.zname.sysmods.sname.mod.0 = k                                            
   c2j.zname.sysmods.sname.mod.k = STRIP(mod#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-MOD statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of MOD values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial mod# initial                                            
      k = c2j.zname.sysmods.sname.mod.0 + 1                                     
      c2j.zname.sysmods.sname.mod.0 = k                                         
      c2j.zname.sysmods.sname.mod.k = STRIP(mod#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodPARM                                                      */        
/*                                                                    */        
/* Description : Get SYSMOD PARM entries.                             */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               PARM entries and fill the following stem variables:  */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.parm.0 = 3                                 */        
/* c2j.zname.sysmods.sname.parm.1 = 'ARHANA00'                        */        
/* c2j.zname.sysmods.sname.parm.2 = 'ARHCMD00'                        */        
/* c2j.zname.sysmods.sname.parm.3 = 'ARHCOM00'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    PARM ENTRIEs begins.                            */        
/*  initial           1st batch of PARM values                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodPARM: Procedure Expose c2j.                                            
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of PARM values */                                              
Do While initial \= ''                                                          
   Parse Var initial parm# initial                                              
   k = c2j.zname.sysmods.sname.parm.0 + 1                                       
   c2j.zname.sysmods.sname.parm.0 = k                                           
   c2j.zname.sysmods.sname.parm.k = STRIP(parm#)                                
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-PARM statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of PARM values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial parm# initial                                           
      k = c2j.zname.sysmods.sname.parm.0 + 1                                    
      c2j.zname.sysmods.sname.parm.0 = k                                        
      c2j.zname.sysmods.sname.parm.k = STRIP(parm#)                             
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodEXEC                                                      */        
/*                                                                    */        
/* Description : Get SYSMOD EXEC entries.                             */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               EXEC entries and fill the following stem variables:  */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.exec.0 = 3                                 */        
/* c2j.zname.sysmods.sname.exec.1 = 'JOPEAPR3'                        */        
/* c2j.zname.sysmods.sname.exec.2 = 'JOPEBATM'                        */        
/* c2j.zname.sysmods.sname.exec.3 = 'JOPEBAT1'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    EXEC ENTRIEs begins.                            */        
/*  initial           1st batch of EXEC values                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodEXEC: Procedure Expose c2j.                                            
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of EXEC values */                                              
Do While initial \= ''                                                          
   Parse Var initial exec# initial                                              
   k = c2j.zname.sysmods.sname.exec.0 + 1                                       
   c2j.zname.sysmods.sname.exec.0 = k                                           
   c2j.zname.sysmods.sname.exec.k = STRIP(exec#)                                
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-EXEC statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of EXEC values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial exec# initial                                           
      k = c2j.zname.sysmods.sname.exec.0 + 1                                    
      c2j.zname.sysmods.sname.exec.0 = k                                        
      c2j.zname.sysmods.sname.exec.k = STRIP(exec#)                             
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodPNL                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD PNL    entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               PNL    entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.pnl.0 = 3                                  */        
/* c2j.zname.sysmods.sname.pnl.1 = 'ARHIHA01'                         */        
/* c2j.zname.sysmods.sname.pnl.2 = 'ARHIHA03'                         */        
/* c2j.zname.sysmods.sname.pnl.3 = 'ARHIHA04'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    PNL    ENTRIEs begins.                          */        
/*  initial           1st batch of PNL    values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodPNL: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of PNL values */                                               
Do While initial \= ''                                                          
   Parse Var initial pnl# initial                                               
   k = c2j.zname.sysmods.sname.pnl.0 + 1                                        
   c2j.zname.sysmods.sname.pnl.0 = k                                            
   c2j.zname.sysmods.sname.pnl.k = STRIP(pnl#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-PNL statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of PNL values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial pnl# initial                                            
      k = c2j.zname.sysmods.sname.pnl.0 + 1                                     
      c2j.zname.sysmods.sname.pnl.0 = k                                         
      c2j.zname.sysmods.sname.pnl.k = STRIP(pnl#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodPNLENU                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD PNLENU entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               PNLENU entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.pnlenu.0 = 3                               */        
/* c2j.zname.sysmods.sname.pnlenu.1 = 'ARHIHA01'                      */        
/* c2j.zname.sysmods.sname.pnlenu.2 = 'ARHIHA03'                      */        
/* c2j.zname.sysmods.sname.pnlenu.3 = 'ARHIHA04'                      */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    PNLENU ENTRIEs begins.                          */        
/*  initial           1st batch of PNLENU values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodPNLENU: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of PNLENU values */                                            
Do While initial \= ''                                                          
   Parse Var initial pnlenu# initial                                            
   k = c2j.zname.sysmods.sname.pnlenu.0 + 1                                     
   c2j.zname.sysmods.sname.pnlenu.0 = k                                         
   c2j.zname.sysmods.sname.pnlenu.k = STRIP(pnlenu#)                            
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-PNLENU statement */                                  
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of PNLENU values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial pnlenu# initial                                         
      k = c2j.zname.sysmods.sname.pnlenu.0 + 1                                  
      c2j.zname.sysmods.sname.pnlenu.0 = k                                      
      c2j.zname.sysmods.sname.pnlenu.k = STRIP(pnlenu#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodMSG                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD MSG    entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               MSG    entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.msg.0 = 3                                  */        
/* c2j.zname.sysmods.sname.msg.1 = 'AZFM00'                           */        
/* c2j.zname.sysmods.sname.msg.2 = 'AZFM26'                           */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    MSG    ENTRIEs begins.                          */        
/*  initial           1st batch of MSG    values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodMSG: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of MSG values */                                               
Do While initial \= ''                                                          
   Parse Var initial msg# initial                                               
   k = c2j.zname.sysmods.sname.msg.0 + 1                                        
   c2j.zname.sysmods.sname.msg.0 = k                                            
   c2j.zname.sysmods.sname.msg.k = STRIP(msg#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-MSG statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of MSG values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial msg# initial                                            
      k = c2j.zname.sysmods.sname.msg.0 + 1                                     
      c2j.zname.sysmods.sname.msg.0 = k                                         
      c2j.zname.sysmods.sname.msg.k = STRIP(msg#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodMSGENU                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD MSGENU entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               MSGENU entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.msgenu.0 = 3                               */        
/* c2j.zname.sysmods.sname.msgenu.1 = 'AZFM00'                        */        
/* c2j.zname.sysmods.sname.msgenu.2 = 'AZFM26'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    MSGENU ENTRIEs begins.                          */        
/*  initial           1st batch of MSGENU values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodMSGENU: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of MSGENU values */                                            
Do While initial \= ''                                                          
   Parse Var initial msgenu# initial                                            
   k = c2j.zname.sysmods.sname.msgenu.0 + 1                                     
   c2j.zname.sysmods.sname.msgenu.0 = k                                         
   c2j.zname.sysmods.sname.msgenu.k = STRIP(msgenu#)                            
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-MSGENU statement */                                  
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of MSGENU values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial msgenu# initial                                         
      k = c2j.zname.sysmods.sname.msgenu.0 + 1                                  
      c2j.zname.sysmods.sname.msgenu.0 = k                                      
      c2j.zname.sysmods.sname.msgenu.k = STRIP(msgenu#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSKL                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD SKL    entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SKL    entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.skl.0 = 3                                  */        
/* c2j.zname.sysmods.sname.skl.1 = 'AZFM00'                           */        
/* c2j.zname.sysmods.sname.skl.2 = 'AZFM26'                           */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SKL    ENTRIEs begins.                          */        
/*  initial           1st batch of SKL    values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSKL: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of SKL values */                                               
Do While initial \= ''                                                          
   Parse Var initial skl# initial                                               
   k = c2j.zname.sysmods.sname.skl.0 + 1                                        
   c2j.zname.sysmods.sname.skl.0 = k                                            
   c2j.zname.sysmods.sname.skl.k = STRIP(skl#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SKL statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SKL values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial skl# initial                                            
      k = c2j.zname.sysmods.sname.skl.0 + 1                                     
      c2j.zname.sysmods.sname.skl.0 = k                                         
      c2j.zname.sysmods.sname.skl.k = STRIP(skl#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSKLENU                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD SKLENU entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SKLENU entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.sklenu.0 = 3                               */        
/* c2j.zname.sysmods.sname.sklenu.1 = 'AZFM00'                        */        
/* c2j.zname.sysmods.sname.sklenu.2 = 'AZFM26'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SKLENU ENTRIEs begins.                          */        
/*  initial           1st batch of SKLENU values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSKLENU: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of SKLENU values */                                            
Do While initial \= ''                                                          
   Parse Var initial sklenu# initial                                            
   k = c2j.zname.sysmods.sname.sklenu.0 + 1                                     
   c2j.zname.sysmods.sname.sklenu.0 = k                                         
   c2j.zname.sysmods.sname.sklenu.k = STRIP(sklenu#)                            
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SKLENU statement */                                  
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SKLENU values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sklenu# initial                                         
      k = c2j.zname.sysmods.sname.sklenu.0 + 1                                  
      c2j.zname.sysmods.sname.sklenu.0 = k                                      
      c2j.zname.sysmods.sname.sklenu.k = STRIP(sklenu#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodTBL                                                       */        
/*                                                                    */        
/* Description : Get SYSMOD TBL    entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               TBL    entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.tbl.0 = 3                                  */        
/* c2j.zname.sysmods.sname.tbl.1 = 'AZFM00'                           */        
/* c2j.zname.sysmods.sname.tbl.2 = 'AZFM26'                           */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    TBL    ENTRIEs begins.                          */        
/*  initial           1st batch of TBL    values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodTBL: Procedure Expose c2j.                                             
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of TBL values */                                               
Do While initial \= ''                                                          
   Parse Var initial tbl# initial                                               
   k = c2j.zname.sysmods.sname.tbl.0 + 1                                        
   c2j.zname.sysmods.sname.tbl.0 = k                                            
   c2j.zname.sysmods.sname.tbl.k = STRIP(tbl#)                                  
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-TBL statement */                                     
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of TBL values */                                           
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial tbl# initial                                            
      k = c2j.zname.sysmods.sname.tbl.0 + 1                                     
      c2j.zname.sysmods.sname.tbl.0 = k                                         
      c2j.zname.sysmods.sname.tbl.k = STRIP(tbl#)                               
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodTBLENU                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD TBLENU entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               TBLENU entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.tblenu.0 = 3                               */        
/* c2j.zname.sysmods.sname.tblenu.1 = 'AZFM00'                        */        
/* c2j.zname.sysmods.sname.tblenu.2 = 'AZFM26'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    TBLENU ENTRIEs begins.                          */        
/*  initial           1st batch of TBLENU values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodTBLENU: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of TBLENU values */                                            
Do While initial \= ''                                                          
   Parse Var initial tblenu# initial                                            
   k = c2j.zname.sysmods.sname.tblenu.0 + 1                                     
   c2j.zname.sysmods.sname.tblenu.0 = k                                         
   c2j.zname.sysmods.sname.tblenu.k = STRIP(tblenu#)                            
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-TBLENU statement */                                  
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of TBLENU values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial tblenu# initial                                         
      k = c2j.zname.sysmods.sname.tblenu.0 + 1                                  
      c2j.zname.sysmods.sname.tblenu.0 = k                                      
      c2j.zname.sysmods.sname.tblenu.k = STRIP(tblenu#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodMACUPD                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD MACUPD entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               MACUPD entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.macupd.0 = 1                               */        
/* c2j.zname.sysmods.sname.macupd.1 = 'DSMDEF'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    MACUPD ENTRIEs begins.                          */        
/*  initial           1st batch of MACUPD values                      */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodMACUPD: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of MACUPD values */                                            
Do While initial \= ''                                                          
   Parse Var initial macupd# initial                                            
   k = c2j.zname.sysmods.sname.macupd.0 + 1                                     
   c2j.zname.sysmods.sname.macupd.0 = k                                         
   c2j.zname.sysmods.sname.macupd.k = STRIP(macupd#)                            
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-MACUPD statement */                                  
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of MACUPD values */                                        
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial macupd# initial                                         
      k = c2j.zname.sysmods.sname.macupd.0 + 1                                  
      c2j.zname.sysmods.sname.macupd.0 = k                                      
      c2j.zname.sysmods.sname.macupd.k = STRIP(macupd#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHELP                                                      */        
/*                                                                    */        
/* Description : Get SYSMOD HELP    entries.                          */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HELP    entries and fill the following stem          */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.help.0 = 3                                 */        
/* c2j.zname.sysmods.sname.help.1 = 'KLT$GVRC'                        */        
/* c2j.zname.sysmods.sname.help.2 = 'KLTABOUT'                        */        
/* c2j.zname.sysmods.sname.help.3 = 'KLTAPDD'                         */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HELP    ENTRIEs begins.                         */        
/*  initial           1st batch of HELP    values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHELP: Procedure Expose c2j.                                            
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HELP values */                                              
Do While initial \= ''                                                          
   Parse Var initial help# initial                                              
   k = c2j.zname.sysmods.sname.help.0 + 1                                       
   c2j.zname.sysmods.sname.help.0 = k                                           
   c2j.zname.sysmods.sname.help.k = STRIP(help#)                                
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HELP statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HELP values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial help# initial                                           
      k = c2j.zname.sysmods.sname.help.0 + 1                                    
      c2j.zname.sysmods.sname.help.0 = k                                        
      c2j.zname.sysmods.sname.help.k = STRIP(help#)                             
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHELPENU                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD HELPENU entries.                          */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HELPENU entries and fill the following stem          */        
/*               variables:                                           */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.helpenu.0 = 3                              */        
/* c2j.zname.sysmods.sname.helpenu.1 = 'KLT$GVRC'                     */        
/* c2j.zname.sysmods.sname.helpenu.2 = 'KLTABOUT'                     */        
/* c2j.zname.sysmods.sname.helpenu.3 = 'KLTAPDD'                      */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HELPENU ENTRIEs begins.                         */        
/*  initial           1st batch of HELPENU values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHELPENU: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HELPENU values */                                           
Do While initial \= ''                                                          
   Parse Var initial helpenu# initial                                           
   k = c2j.zname.sysmods.sname.helpenu.0 + 1                                    
   c2j.zname.sysmods.sname.helpenu.0 = k                                        
   c2j.zname.sysmods.sname.helpenu.k = STRIP(helpenu#)                          
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HELPENU statement */                                 
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HELPENU values */                                       
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial helpenu# initial                                        
      k = c2j.zname.sysmods.sname.helpenu.0 + 1                                 
      c2j.zname.sysmods.sname.helpenu.0 = k                                     
      c2j.zname.sysmods.sname.helpenu.k = STRIP(helpenu#)                       
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSAMP                                                      */        
/*                                                                    */        
/* Description : Get SYSMOD SAMP entries.                             */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SAMP entries and fill the following stem variables:  */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.samp.0 = 3                                 */        
/* c2j.zname.sysmods.sname.samp.1 = 'ARHANA00'                        */        
/* c2j.zname.sysmods.sname.samp.2 = 'ARHAPI'                          */        
/* c2j.zname.sysmods.sname.samp.3 = 'ARHCMD00'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SAMP ENTRIEs begins.                            */        
/*  initial           1st batch of SAMP values                        */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSAMP: Procedure Expose c2j.                                            
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of SAMP values */                                              
Do While initial \= ''                                                          
   Parse Var initial samp# initial                                              
   k = c2j.zname.sysmods.sname.samp.0 + 1                                       
   c2j.zname.sysmods.sname.samp.0 = k                                           
   c2j.zname.sysmods.sname.samp.k = STRIP(samp#)                                
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SAMP statement */                                    
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SAMP values */                                          
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial samp# initial                                           
      k = c2j.zname.sysmods.sname.samp.0 + 1                                    
      c2j.zname.sysmods.sname.samp.0 = k                                        
      c2j.zname.sysmods.sname.samp.k = STRIP(samp#)                             
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodPROGRAM                                                   */        
/*                                                                    */        
/* Description : Get SYSMOD PROGRAM entries.                          */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               PROGRAM entries and fill the following stem          */        
/*               variabes:                                            */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.program.0 = 2                              */        
/* c2j.zname.sysmods.sname.program.1 = 'GLDCLS31'                     */        
/* c2j.zname.sysmods.sname.program.2 = 'GLDCLS64'                     */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    PROGRAM ENTRIEs begins.                         */        
/*  initial           1st batch of PROGRAM values                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodPROGRAM: Procedure Expose c2j.                                         
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of PROGRAM values */                                           
Do While initial \= ''                                                          
   Parse Var initial program# initial                                           
   k = c2j.zname.sysmods.sname.program.0 + 1                                    
   c2j.zname.sysmods.sname.program.0 = k                                        
   c2j.zname.sysmods.sname.program.k = STRIP(program#)                          
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-PROGRAM statement */                                 
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of PROGRAM values */                                       
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial program# initial                                        
      k = c2j.zname.sysmods.sname.program.0 + 1                                 
      c2j.zname.sysmods.sname.program.0 = k                                     
      c2j.zname.sysmods.sname.program.k = STRIP(program#)                       
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSHELLSCR                                                  */        
/*                                                                    */        
/* Description : Get SYSMOD SHELLSCR   entries.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SHELLSCR   entries and fill the following stem       */        
/*               variabes:                                            */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.shellscr.0 = 4                             */        
/* c2j.zname.sysmods.sname.shellscr.1 = 'FEKFMINS'                    */        
/* c2j.zname.sysmods.sname.shellscr.2 = 'FEKFTRKS'                    */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SHELLSCR   ENTRIEs begins.                      */        
/*  initial           1st batch of SHELLSCR   values                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSHELLSCR: Procedure Expose c2j.                                        
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of SHELLSCR values */                                          
Do While initial \= ''                                                          
   Parse Var initial shellscr# initial                                          
   k = c2j.zname.sysmods.sname.shellscr.0 + 1                                   
   c2j.zname.sysmods.sname.shellscr.0 = k                                       
   c2j.zname.sysmods.sname.shellscr.k = STRIP(shellscr#)                        
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SHELLSCR statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of SHELLSCR values */                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial shellscr# initial                                       
      k = c2j.zname.sysmods.sname.shellscr.0 + 1                                
      c2j.zname.sysmods.sname.shellscr.0 = k                                    
      c2j.zname.sysmods.sname.shellscr.k = STRIP(shellscr#)                     
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHOLDFIXCAT                                                */        
/*                                                                    */        
/* Description : Get SYSMOD HOLDFIXCAT entries.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HOLDFIXCAT entries and fill the following stem       */        
/*               variabes:                                            */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.holdfixcat.0 = 4                           */        
/* c2j.zname.sysmods.sname.holdfixcat.1 = 'AA52239'                   */        
/* c2j.zname.sysmods.sname.holdfixcat.2 = 'OA58716'                   */        
/* c2j.zname.sysmods.sname.holdfixcat.3 = 'OA58717'                   */        
/* c2j.zname.sysmods.sname.holdfixcat.4 = 'OA61137'                   */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HOLDFIXCAT ENTRIEs begins.                      */        
/*  initial           1st batch of HOLDFIXCAT values                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHOLDFIXCAT: Procedure Expose c2j.                                      
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HOLDFIXCAT values */                                        
Do While initial \= ''                                                          
   Parse Var initial holdfixcat# initial                                        
   k = c2j.zname.sysmods.sname.holdfixcat.0 + 1                                 
   c2j.zname.sysmods.sname.holdfixcat.0 = k                                     
   c2j.zname.sysmods.sname.holdfixcat.k = STRIP(holdfixcat#)                    
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HOLDFIXCAT statement */                              
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HOLDFIXCAT values */                                    
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial holdfixcat# initial                                     
      k = c2j.zname.sysmods.sname.holdfixcat.0 + 1                              
      c2j.zname.sysmods.sname.holdfixcat.0 = k                                  
      c2j.zname.sysmods.sname.holdfixcat.k = STRIP(holdfixcat#)                 
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHOLDSYSTEM                                                */        
/*                                                                    */        
/* Description : Get SYSMOD HOLDSYSTEM entries.                       */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HOLDSYSTEM entries and fill the following stem       */        
/*               variabes:                                            */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.holdsystem.0 = 1                           */        
/* c2j.zname.sysmods.sname.holdsystem.1 = 'DEP(SP04570)'              */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HOLDSYSTEM ENTRIEs begins.                      */        
/*  initial           1st batch of HOLDSYSTEM values                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHOLDSYSTEM: Procedure Expose c2j.                                      
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HOLDSYSTEM values */                                        
Do While initial \= ''                                                          
   Parse Var initial holdsystem# initial                                        
   k = c2j.zname.sysmods.sname.holdsystem.0 + 1                                 
   c2j.zname.sysmods.sname.holdsystem.0 = k                                     
   c2j.zname.sysmods.sname.holdsystem.k = STRIP(holdsystem#)                    
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HOLDSYSTEM statement */                              
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HOLDSYSTEM values */                                    
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial holdsystem# initial                                     
      k = c2j.zname.sysmods.sname.holdsystem.0 + 1                              
      c2j.zname.sysmods.sname.holdsystem.0 = k                                  
      c2j.zname.sysmods.sname.holdsystem.k = STRIP(holdsystem#)                 
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodHOLDERROR                                                 */        
/*                                                                    */        
/* Description : Get SYSMOD HOLDERROR entries.                        */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               HOLDERROR entries and fill the following stem        */        
/*               variabes:                                            */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.holderror.0 = 3                            */        
/* c2j.zname.sysmods.sname.holderror.1 = 'FA58781'                    */        
/* c2j.zname.sysmods.sname.holderror.2 = 'FA59115'                    */        
/* c2j.zname.sysmods.sname.holderror.3 = 'FA60573'                    */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    HOLDERROR ENTRIEs begins.                       */        
/*  initial           1st batch of HOLDERROR values                   */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodHOLDERROR: Procedure Expose c2j.                                       
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of HOLDERROR values */                                         
Do While initial \= ''                                                          
   Parse Var initial holderror# initial                                         
   k = c2j.zname.sysmods.sname.holderror.0 + 1                                  
   c2j.zname.sysmods.sname.holderror.0 = k                                      
   c2j.zname.sysmods.sname.holderror.k = STRIP(holderror#)                      
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-HOLDERROR statement */                               
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of HOLDERROR values */                                     
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial holderror# initial                                      
      k = c2j.zname.sysmods.sname.holderror.0 + 1                               
      c2j.zname.sysmods.sname.holderror.0 = k                                   
      c2j.zname.sysmods.sname.holderror.k = STRIP(holderror#)                   
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodIFREQ                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD IFREQ entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               IFREQ entries and fill the following stem variables: */        
/*                                                                    */        
/* c2j.zname.sysmods.sname.ifreq.0 = 1                                */        
/* c2j.zname.sysmods.sname.ifreq.1 = 'UA69363'                        */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    IFREQ ENTRIEs begins.                           */        
/*  initial           1st batch of IFREQ values                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodIFREQ: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
initial  = STRIP(initial)                                                       
                                                                                
/* Get 1st batch of IFREQ values */                                             
Do While initial \= ''                                                          
   Parse Var initial ifreq# initial                                             
   k = c2j.zname.sysmods.sname.ifreq.0 + 1                                      
   c2j.zname.sysmods.sname.ifreq.0 = k                                          
   c2j.zname.sysmods.sname.ifreq.k = STRIP(ifreq#)                              
End                                                                             
                                                                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-IFREQ statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get next batch of IFREQ values */                                         
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial ifreq# initial                                          
      k = c2j.zname.sysmods.sname.ifreq.0 + 1                                   
      c2j.zname.sysmods.sname.ifreq.0 = k                                       
      c2j.zname.sysmods.sname.ifreq.k = STRIP(ifreq#)                           
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSupBy                                                     */        
/*                                                                    */        
/* Description : Get SYSMOD SUPBY entries.                            */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SYSMOD entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.supby.0  = 3                               */        
/* c2j.zname.sysmods.sname.supby.1  = 'HKCI310'                       */        
/* c2j.zname.sysmods.sname.supby.2  = 'UA73689'                       */        
/* c2j.zname.sysmods.sname.supby.3  = 'UA76016'                       */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SYSMOD ENTRIES begins.                          */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSupBy: Procedure Expose c2j.                                           
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname = STRIP(zname)                                                            
sname = STRIP(sname)                                                            
                                                                                
/* Get LASTSUP field */                                                         
Do While initial \= ''                                                          
   Parse Var initial sysmod# initial                                            
   k = c2j.zname.sysmods.sname.supby.0 + 1                                      
   c2j.zname.sysmods.sname.supby.0  = k                                         
   c2j.zname.sysmods.sname.supby.k  = STRIP(sysmod#)                            
End                                                                             
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Get out of here is found END-OF-SYSMODs line */                           
   If IsEndOfSysmods(zname, c2j.smplist.line.i) = 'YES' Then Return i           
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SUPBY statement */                                   
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get LASTSUP field */                                                      
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sysmod# initial                                         
      k = c2j.zname.sysmods.sname.supby.0 + 1                                   
      c2j.zname.sysmods.sname.supby.0  = k                                      
      c2j.zname.sysmods.sname.supby.k  = STRIP(sysmod#)                         
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodSourceId                                                  */        
/*                                                                    */        
/* Description : Get SYSMOD SOURCEID entries.                         */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               SYSMOD entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.sourceid.0 = 3                             */        
/* c2j.zname.sysmods.sname.sourceid.1 = 'ORD00750                     */        
/* c2j.zname.sysmods.sname.sourceid.2 = 'PUT1408'                     */        
/* c2j.zname.sysmods.sname.sourceid.3 = 'SMCCOR'                      */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    SYSMOD ENTRIES begins.                          */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodSourceId: Procedure Expose c2j.                                        
Parse Arg zname, sname, idx, initial                                            
                                                                                
zname   = STRIP(zname)                                                          
sname   = STRIP(sname)                                                          
initial = STRIP(initial)                                                        
                                                                                
/* Get SOURCEID field */                                                        
Do While initial \= ''                                                          
   Parse Var initial sourceid# initial                                          
   k = c2j.zname.sysmods.sname.sourceid.0 + 1                                   
   c2j.zname.sysmods.sname.sourceid.0 = k                                       
   c2j.zname.sysmods.sname.sourceid.k = STRIP(sourceid#)                        
End                                                                             
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Get out of here is found END-OF-SYSMODs line */                           
   If IsEndOfSysmods(zname, c2j.smplist.line.i) = 'YES' Then Return i           
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for the END-OF-SOURCEID statement */                                
   If IsEntryEnd(c2j.smplist.line.i) = 'YES' Then                               
      Return i - 1                                                              
                                                                                
   /* Get SOURCEID field */                                                     
   initial = c2j.smplist.line.i                                                 
   Do While initial \= ''                                                       
      Parse Var initial sourceid# initial                                       
      k = c2j.zname.sysmods.sname.sourceid.0 + 1                                
      c2j.zname.sysmods.sname.sourceid.0 = k                                    
      c2j.zname.sysmods.sname.sourceid.k = STRIP(sourceid#)                     
   End                                                                          
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* GetSysmodCIFREQ                                                    */        
/*                                                                    */        
/* Description : Get SYSMOD CIFREQ entries.                           */        
/*                                                                    */        
/* Function    : Process c2j.smplist.line. stem variables to retrieve */        
/*               CIFREQ entries and fill the following stem variables:*/        
/*                                                                    */        
/* c2j.zname.sysmods.sname.cifreq.0 = 3                               */        
/* c2j.zname.sysmods.sname.cifreq.1 = 'HKDS630,UA67172'               */        
/* c2j.zname.sysmods.sname.cifreq.2 = 'HKRJ330,UA67172'               */        
/* c2j.zname.sysmods.sname.cifreq.3 = 'UA69055,UA67787'               */        
/*                                                                    */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             TARGET/DLIB zone name                           */        
/*  sname             SYSMOD name                                     */        
/*  idx               Index in c2j.smplist.line. stem where the       */        
/*                    CIFREQ ENTRIES begins.                          */        
/*  sysmod            1st CIFREQ value (SYSMOD name)                  */        
/*  causedby          1st CIFREQ value (CAUSEDBY)                     */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*          idx       Index of next entry                             */        
/*                                                                    */        
/**********************************************************************/        
GetSysmodCIFREQ: Procedure Expose c2j.                                          
Parse Arg zname, sname, idx, sysmod, causedby                                   
                                                                                
zname    = STRIP(zname)                                                         
sname    = STRIP(sname)                                                         
                                                                                
/* Say sname 'START CFREQ' c2j.smplist.line.idx */                              
                                                                                
/* Get CIFREQ field */                                                          
k = c2j.zname.sysmods.sname.cifreq.0 + 1                                        
c2j.zname.sysmods.sname.cifreq.0 = k                                            
c2j.zname.sysmods.sname.cifreq.k = STRIP(causedby) || ',' || ,                  
                                   STRIP(sysmod)                                
                                                                                
/* Parse __ZONE__ SYSMOD ENTRIES                                      */        
Do i = idx + 1 To c2j.smplist.line.0                                            
                                                                                
   /* Skip trash lines */                                                       
   If IsZoneTrash(zname, c2j.smplist.line.i) = 'YES' Then Iterate               
                                                                                
   /* Check for a new CIFREQ SYSMOD */                                          
                                                                                
   If IsNewSysmod(c2j.smplist.line.i) = 'YES' Then Do                           
   /* Say sname 'END   CFREQ' c2j.smplist.line.i */                             
      /* Return previous line# to make it readable in GetSYSMODs      */        
      Return i - 1                                                              
   End                                                                          
                                                                                
                                                                                
   /* Check for the END-OF-CIFREQ statement */                                  
   Parse Var c2j.smplist.line.i value# '=' sysmod# 'CAUSED BY' causedby#        
   If causedby# = '' Then Do                                                    
/*    Say sname 'END   CFREQ' c2j.smplist.line.i */                             
      Return i - 1                                                              
   End                                                                          
                                                                                
/* Say sname '      CFREQ' c2j.smplist.line.i */                                
                                                                                
   /* Get CIFREQ field */                                                       
   k = c2j.zname.sysmods.sname.cifreq.0 + 1                                     
   c2j.zname.sysmods.sname.cifreq.0 = k                                         
   c2j.zname.sysmods.sname.cifreq.k = STRIP(causedby#) || ',' || ,              
                                      STRIP(sysmod#)                            
                                                                                
End                                                                             
                                                                                
Return c2j.smplist.line.0                                                       
/**********************************************************************/        
/* SMPELIST                                                           */        
/*                                                                    */        
/* Description: Invokes SMP/E LIST command.                           */        
/*                                                                    */        
/* Function   : Allocates required datasets for GIMSMP, fills SMPCNTL */        
/*              with specified SMP/E command and calls utility.       */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  csi               CSI VSAM dataset                                */        
/*  zone              SMP/E zone name                                 */        
/*  command           SMP/E LIST command to execute                   */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure, see log for details.                   */        
/*                                                                    */        
/**********************************************************************/        
SMPELIST: Procedure Expose c2j.                                                 
Parse Arg csi, zone, command                                                    
                                                                                
c2j.zone.smpcntl = c2j.hlq"."zone".SMPCNTL"                                     
c2j.zone.smplog  = c2j.hlq"."zone".SMPLOG"                                      
c2j.zone.smploga = c2j.hlq"."zone".SMPLOGA"                                     
c2j.zone.smpout  = c2j.hlq"."zone".SMPOUT"                                      
c2j.zone.smprpt  = c2j.hlq"."zone".SMPRPT"                                      
c2j.zone.smplist = c2j.hlq"."zone".SMPLIST"                                     
                                                                                
If c2j.smplist.delexisted = 'YES' Then Do                                       
   /* Delete existing SMP/E work datasets */                                    
   If SYSDSN("'"c2j.zone.smpcntl"'") = "OK" Then                                
      Call DELETE "'"c2j.zone.smpcntl"'"                                        
   If SYSDSN("'"c2j.zone.smplog"'") = "OK" Then                                 
      Call DELETE "'"c2j.zone.smplog"'"                                         
   If SYSDSN("'"c2j.zone.smploga"'") = "OK" Then                                
      Call DELETE "'"c2j.zone.smploga"'"                                        
   If SYSDSN("'"c2j.zone.smpout"'") = "OK" Then                                 
      Call DELETE "'"c2j.zone.smpout"'"                                         
   If SYSDSN("'"c2j.zone.smprpt"'") = "OK" Then                                 
      Call DELETE "'"c2j.zone.smprpt"'"                                         
   If SYSDSN("'"c2j.zone.smplist"'") = "OK" Then                                
      Call DELETE "'"c2j.zone.smplist"'"                                        
End                                                                             
                                                                                
Call ALLOCATE "SMPCSI", ,                                                       
              "'"csi"'", ,                                                      
              "SHR"                                                             
Call ALLOCATE "SMPCNTL", ,                                                      
              "'"c2j.zone.smpcntl"'", ,                                         
              'NEW',                                                            
              'SPACE('c2j.smpcnll.primary c2j.smpcntl.secondary')',             
              c2j.smpcntl.space_units,                                          
              'RECFM('c2j.smpcntl.recfm')',                                     
              'LRECL('c2j.smpcntl.lrecl')',                                     
              'BLKSIZE('c2j.smpcntl.blksize') RELEASE'                          
Call ALLOCATE "SMPLOG", ,                                                       
              "'"c2j.zone.smplog"'", ,                                          
              'NEW',                                                            
              'SPACE('c2j.smplog.primary c2j.smplog.secondary')',               
              c2j.smplog.space_units,                                           
              'RECFM('c2j.smplog.recfm')',                                      
              'LRECL('c2j.smplog.lrecl')',                                      
              'BLKSIZE('c2j.smplog.blksize') RELEASE'                           
Call ALLOCATE "SMPLOGA", ,                                                      
              "'"c2j.zone.smploga"'", ,                                         
              'NEW',                                                            
              'SPACE('c2j.smploga.primary c2j.smploga.secondary')',             
              c2j.smploga.space_units,                                          
              'RECFM('c2j.smploga.recfm')',                                     
              'LRECL('c2j.smploga.lrecl')',                                     
              'BLKSIZE('c2j.smploga.blksize') RELEASE'                          
Call ALLOCATE "SMPOUT", ,                                                       
              "'"c2j.zone.smpout"'", ,                                          
              'NEW',                                                            
              'SPACE('c2j.smpout.primary c2j.smpout.secondary')',               
              c2j.smpout.space_units,                                           
              'RECFM('c2j.smpout.recfm')',                                      
              'LRECL('c2j.smpout.lrecl')',                                      
              'BLKSIZE('c2j.smpout.blksize') RELEASE'                           
Call ALLOCATE "SMPRPT", ,                                                       
              "'"c2j.zone.smprpt"'", ,                                          
              'NEW',                                                            
              'SPACE('c2j.smprpt.primary c2j.smprpt.secondary')',               
              c2j.smprpt.space_units,                                           
              'RECFM('c2j.smprpt.recfm')',                                      
              'LRECL('c2j.smprpt.lrecl')',                                      
              'BLKSIZE('c2j.smprpt.blksize') RELEASE'                           
Call ALLOCATE "SMPLIST", ,                                                      
              "'"c2j.zone.smplist"'", ,                                         
              'NEW',                                                            
              'SPACE('c2j.smplist.primary c2j.smplist.secondary')',             
              c2j.smplist.space_units,                                          
              'RECFM('c2j.smplist.recfm')',                                     
              'LRECL('c2j.smplist.lrecl')',                                     
              'BLKSIZE('c2j.smplist.blksize') RELEASE'                          
                                                                                
smpcntl.0 = 2                          /* Prepare SMPCNTL control     */        
smpcntl.1 = '  SET BDY('zone').'       /* ... statements.             */        
smpcntl.2 = '  LIST' command'.'                                                 
                                                                                
ADDRESS MVS 'EXECIO * DISKW SMPCNTL (STEM smpcntl. FINIS)'                      
If rc \= 0 Then Do                                                              
   Say ' ERROR: RETURN CODE' rc 'FROM EXECIO ATTEMPTING TO'                     
   Say "        WRITE '"c2j.hlq"."zone".SMPCNTL'"                               
   Call Terminate 8                                                             
End                                                                             
                                                                                
/* Run SMP/E LIST command */                                                    
ADDRESS TSO 'CALL *(GIMSMP)'                                                    
If rc \= 0 Then Do                                                              
   Say ' '                                                                      
   Say ' ERROR: RETURN CODE' rc 'WHILE RUNNING GIMSMP APPLICATION.'             
   Say '        PROCESSING TERMINATED.'                                         
   Say ' '                                                                      
   Say '        REVIEW SMP/E LOG DATASET FOR MORE INFORMATION.'                 
   Say ' '                                                                      
   Say '        CSI2JSON IS EXITING DUE TO ERROR.'                              
   Call Terminate 8                                                             
End                                                                             
                                                                                
/* Read SMPLIST for further processing */                                       
DROP c2j.smplist.line.                                                          
ADDRESS TSO 'EXECIO * DISKR SMPLIST (FINIS STEM c2j.smplist.line.'              
                                                                                
Call DEALLOC 'SMPCSI'                                                           
Call DEALLOC 'SMPCNTL'                                                          
Call DEALLOC 'SMPLOG'                                                           
Call DEALLOC 'SMPLOGA'                                                          
Call DEALLOC 'SMPOUT'                                                           
Call DEALLOC 'SMPRPT'                                                           
Call DEALLOC 'SMPLIST'                                                          
                                                                                
If c2j.smplist.keepdsn = 'NO' Then Do                                           
   Call DELETE "'"c2j.zone.smpcntl"'"                                           
   Call DELETE "'"c2j.zone.smplog"'"                                            
   Call DELETE "'"c2j.zone.smploga"'"                                           
   Call DELETE "'"c2j.zone.smpout"'"                                            
   Call DELETE "'"c2j.zone.smprpt"'"                                            
   Call DELETE "'"c2j.zone.smplist"'"                                           
End                                                                             
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/*                       UTILITY ROUTINES                             */        
/**********************************************************************/        
/**********************************************************************/        
/* ALLOCATE                                                           */        
/*                                                                    */        
/* Description: Allocate data set.                                    */        
/*                                                                    */        
/* Function:                                                          */        
/*   Issues TSO ALLOCATE command to allocate data set with specific   */        
/*   parameters.                                                      */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  dd                DD name to allocate                             */        
/*  dsname            Dataset name                                    */        
/*  opt               ALLOCATE parms                                  */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return            Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure                                         */        
/*                                                                    */        
/**********************************************************************/        
ALLOCATE: Procedure Expose c2j.                                                 
Parse Arg dd, dsname, opt                                                       
Upper Var dsname                                                                
If dsname = 'DUMMY' Then                                                        
   ADDRESS TSO "ALLOCATE DDNAME("dd") DUMMY" opt                                
Else If dsname = "" Then                                                        
   ADDRESS TSO "ALLOCATE DDNAME("dd")" opt                                      
Else                                                                            
   ADDRESS TSO "ALLOCATE DDNAME("dd") DSNAME("dsname")" opt                     
ret = rc                                                                        
If ret \= 0 Then Do                                                             
   Say " ERROR: RETURN CODE" ret "FROM ALLOCATE COMMAND"                        
   Say " "                                                                      
   Say "             DD:"dd"," dsname                                           
   Say " "                                                                      
   Say "             CSI2JSON IS EXITING DUE TO ERROR WHILE"                    
   Say "             ALLOCATING SPECIFIED DATA SET."                            
   Call Terminate ret                                                           
End                                                                             
Return ret                                                                      
                                                                                
/**********************************************************************/        
/* DEALLOC                                                            */        
/*                                                                    */        
/* Description: FREE DD name.                                         */        
/*                                                                    */        
/* Function:                                                          */        
/*   Issues TSO FREE command to free previously allocated DD.         */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  dd                DD name to free                                 */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return            Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure                                         */        
/*                                                                    */        
/**********************************************************************/        
DEALLOC: Procedure Expose c2j.                                                  
Parse Arg dd                                                                    
ADDRESS TSO "FREE DDNAME("dd")"                                                 
ret = rc                                                                        
If ret \= 0 Then Do                                                             
   Say " ERROR: RETURN CODE" ret "FROM DEALLOC COMMAND"                         
   Say "             ATTEMPTING TO DEALLOCATE DD"                               
   Say " "                                                                      
   Say "            "dd                                                         
   Say " "                                                                      
   Say "             CSI2JSON IS EXITING DUE TO ERROR WHILE"                    
   Say "             DEALLOCATING SPECIFIED DATA SET."                          
   Call Terminate ret                                                           
End                                                                             
Return ret                                                                      
                                                                                
/**********************************************************************/        
/* DELETE                                                             */        
/*                                                                    */        
/* Description: Delete data set.                                      */        
/*                                                                    */        
/* Function:                                                          */        
/*   Issues TSO DELETE command to delete specified data set.          */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  entry             Data set to delete                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return            Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*          > 0       Failure                                         */        
/*                                                                    */        
/**********************************************************************/        
DELETE: Procedure Expose c2j.                                                   
Parse Arg entry                                                                 
/*                                                                              
MSGSTAT = MSG("OFF")                                                            
*/                                                                              
ADDRESS TSO "DELETE" entry                                                      
ret = rc                                                                        
If ret \= 0 Then Do                                                             
   Say " ERROR: RETURN CODE" ret "FROM DELETE COMMAND"                          
   Say "        ATTEMPTING TO DELETE FOLLOWING DATA SET"                        
   Say "        "entry                                                          
   Say "        CSI2JSON REXX IS EXITING DUE TO ERROR..."                       
   Call Terminate ret                                                           
End                                                                             
/*                                                                              
MSGSTAT = MSG("ON")                                                             
*/                                                                              
Return ret                                                                      
/**********************************************************************/        
/*                       DEBUG PURPOSES ONLY                          */        
/**********************************************************************/        
/**********************************************************************/        
/* PrintGLOBAL                                                        */        
/*                                                                    */        
/* Description : Print c2j.GLOBAL. stem                               */        
/*                                                                    */        
/* Function    : Print c2j.GLOBAL. stem                               */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
PrintGLOBAL: Procedure Expose c2j.                                              
                                                                                
Say '*** GLOBAL ZONE PRODUCTS, TOTAL='c2j.GLOBAL.product.0' ***'                
Do i = 1 To c2j.GLOBAL.product.0                                                
   Say 'PRODID      :' c2j.GLOBAL.product.i.prodid                              
   Say 'VRM         :' c2j.GLOBAL.product.i.vrm                                 
   Say 'DESCRIPTION :' c2j.GLOBAL.product.i.description                         
   Say 'REWORK      :' c2j.GLOBAL.product.i.rework                              
   Say 'RECDATE     :' c2j.GLOBAL.product.i.recdate                             
   Say 'RECTIME     :' c2j.GLOBAL.product.i.rectime                             
   Say 'VENDOR      :' c2j.GLOBAL.product.i.vendor                              
   Do j = 1 To c2j.GLOBAL.product.i.prodsup.0                                   
      Say '  PRODSUP   :' c2j.GLOBAL.product.i.prodsup.j                        
   End                                                                          
   Say 'SREL        :' c2j.GLOBAL.product.i.srel                                
   Say ' '                                                                      
End                                                                             
Say '*** GLOBAL ZONE PRODUCTS ***'                                              
Say ' '                                                                         
                                                                                
Say '*** GLOBAL ZONE FEATURES, TOTAL='c2j.GLOBAL.feature.0' ***'                
Do i = 1 To c2j.GLOBAL.feature.0                                                
   Say 'NAME        :' c2j.GLOBAL.feature.i.name                                
   Say 'DESCRIPTION :' c2j.GLOBAL.feature.i.description                         
   Say 'REWORK      :' c2j.GLOBAL.feature.i.rework                              
   Say 'RECDATE     :' c2j.GLOBAL.feature.i.recdate                             
   Say 'RECTIME     :' c2j.GLOBAL.feature.i.rectime                             
   Say 'PRODUCT     :' c2j.GLOBAL.feature.i.product                             
   Do j = 1 To c2j.GLOBAL.feature.i.fmid.0                                      
      Say '  FMID      :' c2j.GLOBAL.feature.i.fmid.j                           
   End                                                                          
   Say ' '                                                                      
End                                                                             
Say '*** GLOBAL ZONE FEATURES ***'                                              
Say ' '                                                                         
                                                                                
Call PrintSysmods('GLOBAL')                                                     
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* PrintTARGET                                                        */        
/*                                                                    */        
/* Description : Print c2j.__target__. stem                           */        
/*                                                                    */        
/* Function    : Print c2j.__target__. stem                           */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI TARGET/DLIB zone name                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
PrintTARGET: Procedure Expose c2j.                                              
Parse Arg csi                                                                   
                                                                                
Say '*** TARGET ZONE INFO ***'                                                  
Do i = 1 To      c2j.zone.target.0                                              
   zname = c2j.zone.target.i                                                    
/* Call GetTLIB csi, zname */                                                   
                                                                                
   Say 'TYPE        :' c2j.zname.type                                           
   Say 'NAME        :' c2j.zname.name                                           
   Say 'ZONE        :' c2j.zname.zone                                           
   Say 'UPGLEVEL    :' c2j.zname.upglevel                                       
   Say 'RELATED     :' c2j.zname.related                                        
   Say 'ZDESC       :' c2j.zname.zdesc                                          
   Say 'OPTIONS     :' c2j.zname.options                                        
   Say 'SREL        :' c2j.zname.srel                                           
   Say '             '                                                          
                                                                                
   Call PrintSysmods(zname)                                                     
                                                                                
End                                                                             
Say ' '                                                                         
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* PrintDLIB                                                          */        
/*                                                                    */        
/* Description : Print c2j.__dlib__. stem                             */        
/*                                                                    */        
/* Function    : Print c2j.__dlib__. stem                             */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  None                                                              */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
PrintDLIB: Procedure Expose c2j.                                                
Parse Arg csi                                                                   
                                                                                
Say '*** DLIB ZONE INFO ***'                                                    
Do i = 1 To      c2j.zone.dlib.0                                                
   zname = c2j.zone.dlib.i                                                      
/* Call GetDLIB csi, zname */                                                   
                                                                                
   Say 'TYPE        :' c2j.zname.type                                           
   Say 'NAME        :' c2j.zname.name                                           
   Say 'ZONE        :' c2j.zname.zone                                           
   Say 'UPGLEVEL    :' c2j.zname.upglevel                                       
   Say 'RELATED     :' c2j.zname.related                                        
   Say 'ZDESC       :' c2j.zname.zdesc                                          
   Say 'OPTIONS     :' c2j.zname.options                                        
   Say 'ACCJCLIN    :' c2j.zname.accjclin                                       
   Say 'SREL        :' c2j.zname.srel                                           
   Say '             '                                                          
                                                                                
   Call PrintSysmods(zname)                                                     
                                                                                
End                                                                             
Say ' '                                                                         
                                                                                
Return 0                                                                        
                                                                                
/**********************************************************************/        
/* PrintSysmods                                                       */        
/*                                                                    */        
/* Description : Print c2j.__zone__..__sysmod__. stem                 */        
/*                                                                    */        
/* Function    : Print c2j.__zone__..__sysmod__. stem                 */        
/*                                                                    */        
/* Input Parameters:                                                  */        
/*                                                                    */        
/*  Parameter         Description                                     */        
/*  -----------       ----------------------------------------------- */        
/*  zname             CSI TARGET/DLIB zone name                       */        
/*                                                                    */        
/* Output:                                                            */        
/*                                                                    */        
/*  Return Code       Message                                         */        
/*  -----------       ----------------------------------------------- */        
/*            0       Success                                         */        
/*                                                                    */        
/**********************************************************************/        
PrintSysmods: Procedure Expose c2j.                                             
Parse Arg zname                                                                 
                                                                                
   ptfs@       = 0                                                              
   apars@      = 0                                                              
   usermods@   = 0                                                              
   functions@  = 0                                                              
   holds@      = 0                                                              
   superseded@ = 0                                                              
   cifreq@     = 0                                                              
   holdsystem@ = 0                                                              
   holdfixcat@ = 0                                                              
   holderror@  = 0                                                              
                                                                                
   Say '*** SYSMOD ENTRIES, TOTAL='c2j.zname.sysmods.0' ***'                    
   Do j = 1 To c2j.zname.sysmods.0                                              
      sname = c2j.zname.sysmods.j                                               
                                                                                
      Select                                                                    
        When c2j.zname.sysmods.sname.type = 'SUPERSEDED' Then                   
          superseded@ = superseded@ + 1                                         
        When c2j.zname.sysmods.sname.type = 'CIFREQ' Then                       
          cifreq@ = cifreq@ + 1                                                 
        When c2j.zname.sysmods.sname.type = 'HOLD' Then                         
          holds@ = holds@ + 1                                                   
        When c2j.zname.sysmods.sname.type = 'PTF' Then                          
          ptfs@ = ptfs@ + 1                                                     
        When c2j.zname.sysmods.sname.type = 'APAR' Then                         
          apars@ = apars@ + 1                                                   
        When c2j.zname.sysmods.sname.type = 'USERMOD' Then                      
          usermods@ = usermods@ + 1                                             
        When c2j.zname.sysmods.sname.type = 'FUNCTION' Then                     
          functions@ = functions@ + 1                                           
        When c2j.zname.sysmods.sname.type = 'HOLDSYSTEM' Then                   
          holdsystem@ = holdsystem@ + 1                                         
        When c2j.zname.sysmods.sname.type = 'HOLDERROR' Then                    
          holderror@ = holderror@ + 1                                           
        When c2j.zname.sysmods.sname.type = 'HOLDFIXCAT' Then                   
          holdfixcat@ = holdfixcat@ + 1                                         
        Otherwise                                                               
          Nop                                                                   
      End                                                                       
                                                                                
      If c2j.zname.sysmods.sname.type = 'SUPERSEDED' Then Do                    
         Say 'TYPE        :' c2j.zname.sysmods.sname.type                       
         Say 'NAME        :' c2j.zname.sysmods.sname.name                       
         Say 'LASTSUP     :' c2j.zname.sysmods.sname.lastsup                    
         Do k = 1 To c2j.zname.sysmods.sname.supby.0                            
            Say '  SUPBY     :' c2j.zname.sysmods.sname.supby.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.cifreq.0                           
            Say '  CIFREQ    :' c2j.zname.sysmods.sname.cifreq.k                
         End                                                                    
         Say '             '                                                    
      End                                                                       
                                                                                
                                                                                
      If c2j.zname.sysmods.sname.type = 'CIFREQ' Then Do                        
         Say 'TYPE        :' c2j.zname.sysmods.sname.type                       
         Say 'NAME        :' c2j.zname.sysmods.sname.name                       
         Do k = 1 To c2j.zname.sysmods.sname.cifreq.0                           
            Say '  CIFREQ    :' c2j.zname.sysmods.sname.cifreq.k                
         End                                                                    
         Say '             '                                                    
      End                                                                       
                                                                                
      If c2j.zname.sysmods.sname.type = 'HOLDFIXCAT' Then Do                    
         Say 'TYPE        :' c2j.zname.sysmods.sname.type                       
         Say 'NAME        :' c2j.zname.sysmods.sname.name                       
         Do k = 1 To c2j.zname.sysmods.sname.holdfixcat.0                       
            Say '  HOLDFIXCAT:' c2j.zname.sysmods.sname.holdfixcat.k            
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.holderror.0                        
            Say '  HOLDERROR :' c2j.zname.sysmods.sname.holderror.k             
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.holdsystem.0                       
            Say '  HOLDSYSTEM:' c2j.zname.sysmods.sname.holdsystem.k            
         End                                                                    
         Say '             '                                                    
      End                                                                       
                                                                                
      If c2j.zname.sysmods.sname.type = 'PTF'      | ,                          
         c2j.zname.sysmods.sname.type = 'APAR'     | ,                          
         c2j.zname.sysmods.sname.type = 'USERMOD'  | ,                          
         c2j.zname.sysmods.sname.type = 'FUNCTION' Then Do                      
         Say 'TYPE        :' c2j.zname.sysmods.sname.type                       
         Say 'NAME        :' c2j.zname.sysmods.sname.name                       
         Say 'DESCRIPTION :' c2j.zname.sysmods.sname.description                
         Say 'APPLY       :' c2j.zname.sysmods.sname.apply                      
         Say 'ACCEPT      :' c2j.zname.sysmods.sname.accept                     
         Say 'REGEN       :' c2j.zname.sysmods.sname.regen                      
         Say 'RECEIVE     :' c2j.zname.sysmods.sname.receive                    
         Say 'BYPASS      :' c2j.zname.sysmods.sname.bypass                     
         Say 'DELLMOD     :' c2j.zname.sysmods.sname.dellmod                    
         Say 'DELBY       :' c2j.zname.sysmods.sname.delby                      
         Say 'FMID        :' c2j.zname.sysmods.sname.fmid                       
         Say 'REWORK      :' c2j.zname.sysmods.sname.rework                     
         Say 'JCLIN       :' c2j.zname.sysmods.sname.jclin                      
         Say 'RECDATE     :' c2j.zname.sysmods.sname.recdate                    
         Say 'RECTIME     :' c2j.zname.sysmods.sname.rectime                    
         Say 'INSTALLDATE :' c2j.zname.sysmods.sname.installdate                
         Say 'INSTALLTIME :' c2j.zname.sysmods.sname.installtime                
         Say 'LASTSUP     :' c2j.zname.sysmods.sname.lastsup                    
         Say 'TLIBPREFIX  :' c2j.zname.sysmods.sname.tlibprefix                 
         Say 'FESN        :' c2j.zname.sysmods.sname.fesn                       
         Do k = 1 To c2j.zname.sysmods.sname.cifreq.0                           
            Say '  CIFREQ    :' c2j.zname.sysmods.sname.cifreq.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.clist.0                            
            Say '  CLIST     :' c2j.zname.sysmods.sname.clist.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data.0                             
            Say '  DATA      :' c2j.zname.sysmods.sname.data.k                  
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data1.0                            
            Say '  DATA1     :' c2j.zname.sysmods.sname.data1.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data2.0                            
            Say '  DATA2     :' c2j.zname.sysmods.sname.data2.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data3.0                            
            Say '  DATA3     :' c2j.zname.sysmods.sname.data3.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data4.0                            
            Say '  DATA4     :' c2j.zname.sysmods.sname.data4.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.data5.0                            
            Say '  DATA5     :' c2j.zname.sysmods.sname.data5.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.user2.0                            
            Say '  USER2     :' c2j.zname.sysmods.sname.user2.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.dlmod.0                            
            Say '  DLMOD     :' c2j.zname.sysmods.sname.dlmod.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.mac.0                              
            Say '  MAC       :' c2j.zname.sysmods.sname.mac.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.mod.0                              
            Say '  MOD       :' c2j.zname.sysmods.sname.mod.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.src.0                              
            Say '  SRC       :' c2j.zname.sysmods.sname.src.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.parm.0                             
            Say '  PARM      :' c2j.zname.sysmods.sname.parm.k                  
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.exec.0                             
            Say '  EXEC      :' c2j.zname.sysmods.sname.exec.k                  
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.help.0                             
            Say '  HELP      :' c2j.zname.sysmods.sname.help.k                  
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.helpenu.0                          
            Say '  HELPENU   :' c2j.zname.sysmods.sname.helpenu.k               
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.pnl.0                              
            Say '  PNL       :' c2j.zname.sysmods.sname.pnl.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.pnlenu.0                           
            Say '  PNLENU    :' c2j.zname.sysmods.sname.pnlenu.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.samp.0                             
            Say '  SAMP      :' c2j.zname.sysmods.sname.samp.k                  
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ifreq.0                            
            Say '  IFREQ     :' c2j.zname.sysmods.sname.ifreq.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.supby.0                            
            Say '  SUPBY     :' c2j.zname.sysmods.sname.supby.k                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.sourceid.0                         
            Say '  SOURCEID  :' c2j.zname.sysmods.sname.sourceid.k              
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.program.0                          
            Say '  PROGRAM   :' c2j.zname.sysmods.sname.program.k               
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.hfs.0                              
            Say '  HFS       :' c2j.zname.sysmods.sname.hfs.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.msg.0                              
            Say '  MSG       :' c2j.zname.sysmods.sname.msg.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.msgenu.0                           
            Say '  MSGENU    :' c2j.zname.sysmods.sname.msgenu.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.skl.0                              
            Say '  SKL       :' c2j.zname.sysmods.sname.skl.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.sklenu.0                           
            Say '  SKLENU    :' c2j.zname.sysmods.sname.sklenu.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.tbl.0                              
            Say '  TBL       :' c2j.zname.sysmods.sname.tbl.k                   
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.tblenu.0                           
            Say '  TBLENU    :' c2j.zname.sysmods.sname.tblenu.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.shellscr.0                         
            Say '  SHELLSCR  :' c2j.zname.sysmods.sname.shellscr.k              
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.holdfixcat.0                       
            Say '  HOLDFIXCAT:' c2j.zname.sysmods.sname.holdfixcat.k            
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.holderror.0                        
            Say '  HOLDERROR :' c2j.zname.sysmods.sname.holderror.k             
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.holdsystem.0                       
            Say '  HOLDSYSTEM:' c2j.zname.sysmods.sname.holdsystem.k            
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.macupd.0                           
            Say '  MACUPD    :' c2j.zname.sysmods.sname.macupd.k                
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.delete.0                       
            vern = c2j.zname.sysmods.sname.ver.delete.k                         
            Say '  DELETE VER:' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.delete.vern.0               
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.delete.vern.n                    
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.suping.0                       
            vern = c2j.zname.sysmods.sname.ver.suping.k                         
            Say '  SUPING VER:' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.suping.vern.0               
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.suping.vern.n                    
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.req.0                          
            vern = c2j.zname.sysmods.sname.ver.req.k                            
            Say '  REQ VER   :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.req.vern.0                  
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.req.vern.n                       
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.vers.0                         
            vern = c2j.zname.sysmods.sname.ver.vers.k                           
            Say '  VERS VER  :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.vers.vern.0                 
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.vers.vern.n                      
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.srel.0                         
            vern = c2j.zname.sysmods.sname.ver.srel.k                           
            Say '  SREL VER  :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.srel.vern.0                 
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.srel.vern.n                      
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.fmid.0                         
            vern = c2j.zname.sysmods.sname.ver.fmid.k                           
            Say '  FMID VER  :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.fmid.vern.0                 
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.fmid.vern.n                      
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.pre.0                          
            vern = c2j.zname.sysmods.sname.ver.pre.k                            
            Say '  PRE  VER  :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.pre.vern.0                  
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.pre.vern.n                       
            End                                                                 
         End                                                                    
         Do k = 1 To c2j.zname.sysmods.sname.ver.npre.0                         
            vern = c2j.zname.sysmods.sname.ver.npre.k                           
            Say '  NPRE VER  :' vern                                            
            Do n = 1 To c2j.zname.sysmods.sname.ver.npre.vern.0                 
               Say '    ITEM    :' ,                                            
                   c2j.zname.sysmods.sname.ver.npre.vern.n                      
            End                                                                 
         End                                                                    
         Say '             '                                                    
                                                                                
      End                                                                       
                                                                                
   End                                                                          
                                                                                
   Say 'PTFs       :' ptfs@                                                     
   Say 'APARs      :' apars@                                                    
   Say 'USERMODs   :' usermods@                                                 
   Say 'FUNCTIONs  :' functions@                                                
   Say 'HOLDs      :' holds@                                                    
   Say 'SUPERSEDED :' superseded@                                               
   Say 'CIFREQ     :' cifreq@                                                   
   Say 'HOLDSYSTEM :' holdsystem@                                               
   Say 'HOLDERROR  :' holderror@                                                
   Say 'HOLDFIXCAT :' holdfixcat@                                               
                                                                                
Return 0                                                                        
